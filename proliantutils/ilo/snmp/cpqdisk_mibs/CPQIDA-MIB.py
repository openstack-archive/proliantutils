#
# PySNMP MIB module CPQIDA-MIB (http://pysnmp.sf.net)
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( compaq, cpqHoTrapFlags, ) = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( sysName, ) = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqDriveArray = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3))
cpqDaMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 1))
cpqDaComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2))
cpqDaTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 3))
cpqDaInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 1))
cpqDaCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 2))
cpqDaLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 3))
cpqDaSpareDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 4))
cpqDaPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 5))
cpqDaPhyDrvThr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 6))
cpqDaCntlrPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 7))
cpqDaLogDrvPerf = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 8))
cpqDaTapeDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 9))
cpqDaTapeCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 10))
cpqDaTapeLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 11))
cpqDaOsNetWare3x = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1))
cpqDaOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4))
cpqDaMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
cpqDaMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqDaNw3xDriverName = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaNw3xDriverVer = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqDaNw3xPollType = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("polled", 2), ("demand", 3),))).setMaxAccess("readonly")
cpqDaNw3xPollTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,300))).setMaxAccess("readonly")
cpqDaNw3xDriverStatTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5), )
cpqDaNw3xDriverStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaNw3xCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaNw3xLogDrvIndex"))
cpqDaNw3xCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaNw3xLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaNw3xTotalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
cpqDaNw3xTotalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
cpqDaNw3xCorrReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
cpqDaNw3xCorrWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
cpqDaNw3xFatalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
cpqDaNw3xFatalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
cpqDaNw3xVolMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6), )
cpqDaNw3xVolMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaNw3xVolCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaNw3xVolLogDrvIndex"))
cpqDaNw3xVolCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaNw3xVolLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaNw3xVolMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
cpqDaOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2), )
cpqDaOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaOsCommonModuleIndex"))
cpqDaOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqDaOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7,7)).setFixedLength(7)).setMaxAccess("readonly")
cpqDaOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaOsCommonCollectionReset = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("resetSupported", 2), ("resetNotSupported", 3), ("doReset", 4),))).setMaxAccess("readwrite")
cpqDaCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1), )
cpqDaCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaCntlrIndex"))
cpqDaCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaCntlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 88,)).clone(namedValues=NamedValues(("other", 1), ("ida", 2), ("idaExpansion", 3), ("ida-2", 4), ("smart", 5), ("smart-2e", 6), ("smart-2p", 7), ("smart-2sl", 8), ("smart-3100es", 9), ("smart-3200", 10), ("smart-2dh", 11), ("smart-221", 12), ("sa-4250es", 13), ("sa-4200", 14), ("sa-integrated", 15), ("sa-431", 16), ("sa-5300", 17), ("raidLc2", 18), ("sa-5i", 19), ("sa-532", 20), ("sa-5312", 21), ("sa-641", 22), ("sa-642", 23), ("sa-6400", 24), ("sa-6400em", 25), ("sa-6i", 26), ("sa-generic", 27), ("sa-p600", 29), ("sa-p400", 30), ("sa-e200", 31), ("sa-e200i", 32), ("sa-p400i", 33), ("sa-p800", 34), ("sa-e500", 35), ("sa-p700m", 36), ("sa-p212", 37), ("sa-p410", 38), ("sa-p410i", 39), ("sa-p411", 40), ("sa-b110i", 41), ("sa-p712m", 42), ("sa-p711m", 43), ("sa-p812", 44), ("sw-1210m", 45), ("sa-p220i", 46), ("sa-p222", 47), ("sa-p420", 48), ("sa-p420i", 49), ("sa-p421", 50), ("sa-b320i", 51), ("sa-p822", 52), ("sa-p721m", 53), ("sa-b120i", 54), ("hps-1224", 55), ("hps-1228", 56), ("hps-1228m", 57), ("sa-p822se", 58), ("hps-1224e", 59), ("hps-1228e", 60), ("hps-1228em", 61), ("sa-p230i", 62), ("sa-p430i", 63), ("sa-p430", 64), ("sa-p431", 65), ("sa-p731m", 66), ("sa-p830i", 67), ("sa-p830", 68), ("sa-p831", 69), ("sa-p530", 70), ("sa-p531", 71), ("sa-p244br", 72), ("sa-p246br", 73), ("sa-p440", 74), ("sa-p440ar", 75), ("sa-p441", 76), ("sa-p741m", 77), ("sa-p840", 78), ("sa-p841", 79), ("sh-h240ar", 80), ("sh-h244br", 81), ("sh-h240", 82), ("sh-h241", 83), ("sa-b140i", 84), ("sh-generic", 85), ("sa-p840ar", 88),))).setMaxAccess("readonly")
cpqDaCntlrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqDaCntlrStndIntr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("secondary", 3), ("disabled", 4), ("unavailable", 5),))).setMaxAccess("readonly")
cpqDaCntlrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqDaCntlrProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,1))).setMaxAccess("readonly")
cpqDaCntlrPartnerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
cpqDaCntlrCurrentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("notDuplexed", 2), ("active", 3), ("backup", 4), ("asymActiveActive", 5),))).setMaxAccess("readonly")
cpqDaCntlrBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("generalFailure", 3), ("cableProblem", 4), ("poweredOff", 5), ("cacheModuleMissing", 6),))).setMaxAccess("readonly")
cpqDaCntlrPartnerBoardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("generalFailure", 3), ("cableProblem", 4), ("poweredOff", 5),))).setMaxAccess("readonly")
cpqDaCntlrBoardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqDaCntlrPartnerBoardCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqDaCntlrDriveOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("owner", 2), ("notOwner", 3),))).setMaxAccess("readonly")
cpqDaCntlrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
cpqDaCntlrRedundancyType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("notRedundant", 2), ("driverDuplexing", 3), ("fwActiveStandby", 4), ("fwPrimarySecondary", 5), ("fwActiveActive", 6),))).setMaxAccess("readonly")
cpqDaCntlrRedundancyError = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,)).clone(namedValues=NamedValues(("other", 1), ("noFailure", 2), ("noRedundantController", 3), ("differentHardware", 4), ("noLink", 5), ("differentFirmware", 6), ("differentCache", 7), ("otherCacheFailure", 8), ("noDrives", 9), ("otherNoDrives", 10), ("unsupportedDrives", 11), ("expandInProgress", 12),))).setMaxAccess("readonly")
cpqDaCntlrAccessModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notPresent", 3), ("badSignature", 4), ("badChecksum", 5), ("fullyFunctional", 6), ("upgradeFirmware", 7),))).setMaxAccess("readonly")
cpqDaCntlrDaughterBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notPresent", 3), ("scsiBoardPresent", 4), ("fibreBoardPresent", 5), ("arrayExpansionModulePresent", 6),))).setMaxAccess("readonly")
cpqDaCntlrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaCntlrNumberOfBuses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
cpqDaCntlrBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 22), Counter32()).setMaxAccess("readwrite")
cpqDaCntlrRebuildPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("low", 2), ("medium", 3), ("high", 4), ("mediumHigh", 5),))).setMaxAccess("readonly")
cpqDaCntlrExpandPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("low", 2), ("medium", 3), ("high", 4),))).setMaxAccess("readonly")
cpqDaCntlrNumberOfInternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
cpqDaCntlrNumberOfExternalPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
cpqDaCntlrDriveWriteCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3),))).setMaxAccess("readonly")
cpqDaCntlrPartnerSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
cpqDaCntlrOptionRomRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqDaCntlrHbaFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,17))).setMaxAccess("readonly")
cpqDaCntlrHBAModeOptionRomRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,17))).setMaxAccess("readonly")
cpqDaCntlrCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 32), Integer32()).setMaxAccess("readonly")
cpqDaCntlrLastLockupCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 33), Integer32()).setMaxAccess("readonly")
cpqDaCntlrEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("notEnabled", 2), ("enabledLocalKeyMode", 3), ("enabledRemoteKeyManagerMode", 4),))).setMaxAccess("readonly")
cpqDaCntlrASICEncptSelfTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("selfTestsPass", 2), ("selfTestsFailed", 3),))).setMaxAccess("readonly")
cpqDaCntlrEncryptCspNvramStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("detectionFailed", 3),))).setMaxAccess("readonly")
cpqDaCntlrEncryptCryptoOfficerPwdSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3),))).setMaxAccess("readonly")
cpqDaCntlrEncryptCntlrPwdSetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3),))).setMaxAccess("readonly")
cpqDaCntlrEncryptCntlrPwdAvailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("passwordMissing", 2), ("passwordActive", 3),))).setMaxAccess("readonly")
cpqDaCntlrUnencryptedLogDrvCreationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3),))).setMaxAccess("readonly")
cpqDaCntlrEncryptedLogDrvCreationPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3),))).setMaxAccess("readonly")
cpqDaCntlrEncryptFWLockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("false", 2), ("true", 3),))).setMaxAccess("readonly")
cpqDaCntlrOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("smartArrayMode", 2), ("smartHbaMode", 3),))).setMaxAccess("readonly")
cpqDaAccelTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2), )
cpqDaAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaAccelCntlrIndex"))
cpqDaAccelCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaAccelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("enabled", 3), ("tmpDisabled", 4), ("permDisabled", 5), ("cacheModFlashMemNotAttached", 6), ("cacheModDegradedFailsafeSpeed", 7), ("cacheModCriticalFailure", 8), ("cacheReadCacheNotMapped", 9),))).setMaxAccess("readonly")
cpqDaAccelMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
cpqDaAccelBadData = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("possible", 3),))).setMaxAccess("readonly")
cpqDaAccelErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32,)).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("badConfig", 3), ("lowBattery", 4), ("disableCmd", 5), ("noResources", 6), ("notConnected", 7), ("badMirrorData", 8), ("readErr", 9), ("writeErr", 10), ("configCmd", 11), ("expandInProgress", 12), ("snapshotInProgress", 13), ("redundantLowBattery", 14), ("redundantSizeMismatch", 15), ("redundantCacheFailure", 16), ("excessiveEccErrors", 17), ("adgEnablerMissing", 18), ("postEccErrors", 19), ("batteryHotRemoved", 20), ("capacitorChargeLow", 21), ("notEnoughBatteries", 22), ("cacheModuleNotSupported", 23), ("batteryNotSupported", 24), ("noCapacitorAttached", 25), ("capBasedBackupFailed", 26), ("capBasedRestoreFailed", 27), ("capBasedModuleHWFailure", 28), ("capacitorFailedToCharge", 29), ("capacitorBasedHWMemBeingErased", 30), ("incompatibleCacheModule", 31), ("fbcmChargerCircuitFailure", 32),))).setMaxAccess("readonly")
cpqDaAccelBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("recharging", 3), ("failed", 4), ("degraded", 5), ("notPresent", 6), ("capacitorFailed", 7),))).setMaxAccess("readonly")
cpqDaAccelReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
cpqDaAccelWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
cpqDaAccelCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqDaAccelReadMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 10), Integer32()).setMaxAccess("readonly")
cpqDaAccelSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
cpqDaAccelTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 12), Integer32()).setMaxAccess("readonly")
cpqDaAccelReadCachePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
cpqDaAccelWriteCachePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
cpqDaAccelFailedBatteries = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,16))).setMaxAccess("readonly")
cpqDaAccelBackupPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("battery", 2), ("capacitor", 3),))).setMaxAccess("readonly")
cpqDaAccelBoardCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 17), Integer32()).setMaxAccess("readonly")
cpqDaAccelCapacitorCurrentTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 18), Integer32()).setMaxAccess("readonly")
cpqDaAccelMemoryDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
cpqDaAccelMemoryTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
cpqDaManagedCableTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3), )
cpqDaManagedCableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaManagedCableCntlrIndex"))
cpqDaManagedCableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaManagedCableCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
cpqDaManagedCableHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,4))).setMaxAccess("readonly")
cpqDaManagedCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("nonFatalFault", 3), ("fatalFault", 4),))).setMaxAccess("readonly")
cpqDaManagedCableFaultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("linkFault", 3), ("noComWithCableMgmtInterface", 4), ("cannotConfigureCable", 5),))).setMaxAccess("readonly")
cpqDaManagedCableVendorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,2))).setMaxAccess("readonly")
cpqDaManagedCableVendorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,16))).setMaxAccess("readonly")
cpqDaManagedCableVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,16))).setMaxAccess("readonly")
cpqDaManagedCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 2, 3, 1, 9), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1), )
cpqDaLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaLogDrvIndex"))
cpqDaLogDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaLogDrvFaultTol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("mirroring", 3), ("dataGuard", 4), ("distribDataGuard", 5), ("advancedDataGuard", 7), ("raid50", 8), ("raid60", 9), ("raid1Adm", 10), ("raid10Adm", 11),))).setMaxAccess("readonly")
cpqDaLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("unconfigured", 4), ("recovering", 5), ("readyForRebuild", 6), ("rebuilding", 7), ("wrongDrive", 8), ("badConnect", 9), ("overheating", 10), ("shutdown", 11), ("expanding", 12), ("notAvailable", 13), ("queuedForExpansion", 14), ("multipathAccessDegraded", 15), ("erasing", 16), ("predictiveSpareRebuildReady", 17), ("rapidParityInitInProgress", 18), ("rapidParityInitPending", 19), ("noAccessEncryptedNoCntlrKey", 20), ("unencryptedToEncryptedInProgress", 21), ("newLogDrvKeyRekeyInProgress", 22), ("noAccessEncryptedCntlrEncryptnNotEnbld", 23), ("unencryptedToEncryptedNotStarted", 24), ("newLogDrvKeyRekeyRequestReceived", 25),))).setMaxAccess("readonly")
cpqDaLogDrvAutoRel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readwrite")
cpqDaLogDrvRebuildBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
cpqDaLogDrvHasAccel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("unavailable", 2), ("enabled", 3), ("disabled", 4),))).setMaxAccess("readonly")
cpqDaLogDrvAvailSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaLogDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqDaLogDrvPhyDrvIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqDaLogDrvPercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
cpqDaLogDrvStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaLogDrvBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readwrite")
cpqDaLogDrvSpareReplaceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,256))).setMaxAccess("readonly")
cpqDaLogDrvRebuildingPhyDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaLogDrvMultipathAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notConfigured", 3), ("pathRedundant", 4), ("noRedundantPath", 5),))).setMaxAccess("readonly")
cpqDaLogDrvNmbrOfParityGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqDaLogDrvSplitMirrorBackupLogDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("isNotBackupLogicalDrive", 2), ("isBackupLogicalDrive", 3),))).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelAssocType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("nonMember", 2), ("logicalDriveMember", 3), ("cacheVolumeMember", 4),))).setMaxAccess("readonly")
cpqDaLogDrvCacheVolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 22), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvRPIPercentComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
cpqDaLogDrvSSDSmartPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("updateDriver", 2), ("ssdSmartPathDisabled", 3), ("ssdSmartPathEnabled", 4),))).setMaxAccess("readonly")
cpqDaLogDrvEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("encrypted", 2), ("notEncrypted", 3),))).setMaxAccess("readonly")
cpqDaLogDrvPhyDrvExtAttachTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2), )
cpqDaLogDrvPhyDrvExtAttachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvPhyDrvAttachExtIndex"))
cpqDaLogDrvPhyDrvAttachExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaLogDrvCntlrExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvLogDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaLogDrvPhyDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaLogDrvSprRplcExtAttachTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3), )
cpqDaLogDrvSprRplcExtAttachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvSprRplcAttachExtIndex"))
cpqDaLogDrvSprRplcAttachExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaLogDrvSprRplcCntlrExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvSprRplcLogDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaLogDrvSprRplcReplacedPhysDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaLogDrvSprRplcSparePhysDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaLogDrvAvalSprExtAttachTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4), )
cpqDaLogDrvAvalSprExtAttachEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvAvailSprAttachExtIndex"))
cpqDaLogDrvAvailSprAttachExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaLogDrvAvailSprCntlrExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvAvailSprLogDrvExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaLogDrvAvailSprAvailableSpareExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaLogDrvCacheVolumeAccelTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5), )
cpqDaLogDrvCacheVolumeAccelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvCacheVolAccelCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaLogDrvCacheVolAccelLogDrvIndex"))
cpqDaLogDrvCacheVolAccelCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelCachingAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("multiSegment", 2), ("singleSegment", 3),))).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelCacheState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("cacheVolOffline", 4), ("logDriveOffline", 5), ("neverConfigured", 6), ("flushing", 7), ("configuring", 8), ("cacheConfigurationFailed", 9),))).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("readOnly", 2), ("writeThrough", 3), ("writeBackSafe", 4), ("writeBackUnsafe", 5), ("writeThroughNoLoad", 6),))).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadHitsH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadHits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoadH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 8), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 9), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissLoadingH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 10), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 11), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissSkipH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 12), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 13), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelReadCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 14), Gauge32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteHitsH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 15), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteHits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 16), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoadH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 17), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 18), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissLoadingH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 19), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 20), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissSkipH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 21), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissSkip = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 22), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelWriteCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 23), Gauge32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelLoadFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 24), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelCacheLineSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 25), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissLockedH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 26), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 27), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissLockedH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 28), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 29), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissTotalH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 30), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfReadMissTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 31), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissTotalH = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 32), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvCacheVolAccelNoOfWriteMissTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 3, 5, 1, 33), Integer32()).setMaxAccess("readonly")
cpqDaSpareTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1), )
cpqDaSpareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaSpareCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaSparePhyDrvIndex"))
cpqDaSpareCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaSparePhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaSpareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("failed", 3), ("inactive", 4), ("building", 5), ("active", 6),))).setMaxAccess("readonly")
cpqDaSpareReplacedDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaSpareRebuildBlks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
cpqDaSpareCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqDaSpareBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
cpqDaSpareBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaSpareReplacedDrvBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
cpqDaSpareReplacedDrvBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
cpqDaSparePercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
cpqDaSpareLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1), )
cpqDaPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvIndex"))
cpqDaPhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqDaPhyDrvBay = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("predictiveFailure", 4), ("erasing", 5), ("eraseDone", 6), ("eraseQueued", 7), ("ssdWearOut", 8), ("notAuthenticated", 9),))).setMaxAccess("readonly")
cpqDaPhyDrvFactReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvRefHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvHReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvHWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvHSeeks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvSeeks = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvHardReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvRecvReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvHardWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvRecvWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvHSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 22), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
cpqDaPhyDrvFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
cpqDaPhyDrvFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
cpqDaPhyDrvDrqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvOtherTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvSpinupRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvBadRecvReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvBadRecvWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvFormatErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvPostErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvNotReadyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 33), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvReallocAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 34), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvThreshPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("false", 1), ("true", 2),))).setMaxAccess("readonly")
cpqDaPhyDrvHasMonInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("false", 1), ("true", 2),))).setMaxAccess("readonly")
cpqDaPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 37), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqDaPhyDrvHotPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 38), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvMediaErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvHardwareErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 40), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvAbortedCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 41), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvSpinUpErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 42), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvBadTargetErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 43), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 44), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3), ("proLiant", 4),))).setMaxAccess("readonly")
cpqDaPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 45), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvBusFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 46), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvIrqDeglitches = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 47), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 48), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 49), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 50), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqDaPhyDrvPreFailMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 52), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("notAvailable", 2), ("available", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 53), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 54), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6), ("ultra320", 7),))).setMaxAccess("readonly")
cpqDaPhyDrvFailureCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 55), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvBlinkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 56), Counter32()).setMaxAccess("readwrite")
cpqDaPhyDrvSmartStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 57), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("replaceDrive", 3), ("replaceDriveSSDWearOut", 4),))).setMaxAccess("readonly")
cpqDaPhyDrvConfigurationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 58), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("configured", 2), ("notConfigured", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvRotationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 59), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("rpm7200", 2), ("rpm10K", 3), ("rpm15K", 4), ("rpmSsd", 5),))).setMaxAccess("readonly")
cpqDaPhyDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 60), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("parallelScsi", 2), ("sata", 3), ("sas", 4),))).setMaxAccess("readonly")
cpqDaPhyDrvSataVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 61), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("sataOne", 2), ("sataTwo", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,4))).setMaxAccess("readonly")
cpqDaPhyDrvBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 63), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvNegotiatedLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 65), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("rate-1-5", 2), ("rate-3-0", 3), ("rate-6-0", 4), ("rate-12-0", 5),))).setMaxAccess("readonly")
cpqDaPhyDrvNcqSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 66), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("noControllerSupport", 2), ("noDriveSupport", 3), ("ncqDisabled", 4), ("ncqEnabled", 5),))).setMaxAccess("readonly")
cpqDaPhyDrvPhyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 67), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvMultipathAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 68), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("notConfigured", 3), ("pathRedundant", 4), ("noRedundantPath", 5), ("driveFailed", 6),))).setMaxAccess("readonly")
cpqDaPhyDrvMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 69), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("rotatingPlatters", 2), ("solidState", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvCurrentTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 70), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 71), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvMaximumTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 72), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvSSDWearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 73), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fiftySixDayThreshold", 3), ("fivePercentThreshold", 4), ("twoPercentThreshold", 5), ("ssdWearOut", 6),))).setMaxAccess("readonly")
cpqDaPhyDrvPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 74), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvSSDPercntEndrnceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 75), Gauge32()).setMaxAccess("readonly")
cpqDaPhyDrvSSDEstTimeRemainingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 76), Counter32()).setMaxAccess("readonly")
cpqDaPhyDrvAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 77), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("authenticationFailed", 3), ("authenticationPassed", 4),))).setMaxAccess("readonly")
cpqDaPhyDrvSmartCarrierAppFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 78), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvSmartCarrierBootldrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 79), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvEncryptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 1, 1, 80), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("encrypted", 2), ("notEncrypted", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvErrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2), )
cpqDaPhyDrvErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaPhyDrvErrCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvErrIDIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvErrIndex"))
cpqDaPhyDrvErrCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvErrIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqDaPhyDrvErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("noError", 2), ("scsiError", 3), ("camError", 4),))).setMaxAccess("readonly")
cpqDaPhyDrvScsiOp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvScsiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvCamStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvSenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvQualifier = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvSenseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvBlockValid = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("false", 1), ("true", 2),))).setMaxAccess("readonly")
cpqDaPhyDrvBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqDaPhyDrvUserDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvErrDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,)).clone(namedValues=NamedValues(("driveFailure", 1), ("commFailure", 2), ("driveIOError", 3), ("scsiCommError", 4), ("compaqUpgradeRequired", 5), ("driveWriteProtected", 6), ("invalidRequest", 7), ("scsiMessageError", 8), ("controllerFailure", 9), ("internExternConflict", 10), ("internalDriveFailure", 11), ("scsiErrorOutOfRange", 12), ("camErrorOutOfRange", 13), ("errorTypeOutOfRange", 14),))).setMaxAccess("readonly")
cpqDaPhyDrvPathTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3), )
cpqDaPhyDrvPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaPhyDrvPathCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvPathDrvIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvPathIndex"))
cpqDaPhyDrvPathCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvPathDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaPhyDrvPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,3))).setMaxAccess("readonly")
cpqDaPhyDrvPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("linkDown", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvPathCurrentRole = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("alternate", 3),))).setMaxAccess("readonly")
cpqDaPhyDrvPathHostConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,4))).setMaxAccess("readonly")
cpqDaPhyDrvPathBoxOnConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvPathLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 5, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaPhyDrvThrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1), )
cpqDaPhyDrvThrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaPhyDrvThrCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaPhyDrvThrIndex"))
cpqDaPhyDrvThrCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaPhyDrvThrUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrRefHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrHardReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrRecvReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrHardWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrRecvWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrHSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 12), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 13), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 14), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrDrqTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 15), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrOtherTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrSpinupRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 17), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrBadRecvReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 18), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrBadRecvWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 19), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrFormatErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 20), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrPostErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 21), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrNotReadyErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 22), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrReallocAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 23), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrHotPlugs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 24), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrMediaErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 25), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrHardwareErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 26), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrAbortedCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 27), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrSpinUpErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 28), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrBadTargetErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 29), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrViUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4294967295,)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295),))).setMaxAccess("readonly")
cpqDaPhyDrvThrViSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4294967295,)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295),))).setMaxAccess("readonly")
cpqDaPhyDrvThrViFunctTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 32), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4294967295,)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295),))).setMaxAccess("readonly")
cpqDaPhyDrvThrViFunctTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 33), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4294967295,)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295),))).setMaxAccess("readonly")
cpqDaPhyDrvThrViFunctTest3 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4294967295,)).clone(namedValues=NamedValues(("false", 1), ("true", 2), ("unknown", 4294967295),))).setMaxAccess("readonly")
cpqDaPhyDrvThrBusFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 35), Integer32()).setMaxAccess("readonly")
cpqDaPhyDrvThrIrqDeglitches = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 6, 1, 1, 36), Integer32()).setMaxAccess("readonly")
cpqDaCntlrPerfTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1), )
cpqDaCntlrPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaCntlrPerfCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaCntlrPerfInstance"))
cpqDaCntlrPerfCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaCntlrPerfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
cpqDaCntlrPerfSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
cpqDaCntlrPerfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
cpqDaCntlrPerfCpuPercentBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
cpqDaCntlrPerfCommandCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
cpqDaCntlrPerfAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 7, 1, 1, 7), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1), )
cpqDaLogDrvPerfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaLogDrvPerfCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaLogDrvPerfIndex"), (0, "CPQIDA-MIB", "cpqDaLogDrvPerfInstance"))
cpqDaLogDrvPerfCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaLogDrvPerfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 4), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfAvgQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 6), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfTotalIO = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfReadAheadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfSectorsRead = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 12), Integer32()).setMaxAccess("readonly")
cpqDaLogDrvPerfSectorsWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 8, 1, 1, 13), Integer32()).setMaxAccess("readonly")
cpqDaTapeDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1), )
cpqDaTapeDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), (0, "CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), (0, "CPQIDA-MIB", "cpqDaTapeDrvLunIndex"))
cpqDaTapeDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaTapeDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeDrvScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeDrvLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
cpqDaTapeDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqDaTapeDrvFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqDaTapeDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5), ("missingWasOk", 6), ("missingWasOffline", 7),))).setMaxAccess("readonly")
cpqDaTapeDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
cpqDaTapeDrvFwSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18,)).clone(namedValues=NamedValues(("other", 1), ("cpqDat4-16", 2), ("cpqDatAuto", 3), ("cpqDat2-8", 4), ("cpqDlt10-20", 5), ("cpqDlt20-40", 6), ("cpqDlt15-30", 7), ("cpqDlt35-70", 8), ("cpqDat4-8", 9), ("cpqSlr4-8", 10), ("cpqDat12-24", 11), ("cpqDatAuto12-24", 12), ("cpqAit35", 14), ("cpqAit50", 15), ("cpqDat20-40", 16), ("cpqDlt40-80", 17), ("cpqDatAuto20-40", 18),))).setMaxAccess("readonly")
cpqDaTapeDrvCleanReq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3),))).setMaxAccess("readonly")
cpqDaTapeDrvCleanTapeRepl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3),))).setMaxAccess("readonly")
cpqDaTapeDrvCleanTapeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 14), Integer32()).setMaxAccess("readonly")
cpqDaTapeDrvLibraryDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3),))).setMaxAccess("readonly")
cpqDaTapeDrvMagSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 16), Integer32()).setMaxAccess("readonly")
cpqDaTapeDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3),))).setMaxAccess("readonly")
cpqDaTapeDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3),))).setMaxAccess("readonly")
cpqDaTapeDrvCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3),))).setMaxAccess("readonly")
cpqDaTapeDrvCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6),))).setMaxAccess("readonly")
cpqDaTapeDrvProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 21), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("parallelScsi", 2), ("sata", 3), ("sas", 4),))).setMaxAccess("readonly")
cpqDaTapeDrvNegotiatedLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 9, 1, 1, 22), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("rate-1-5", 2), ("rate-3-0", 3), ("rate-6-0", 4), ("rate-12-0", 5),))).setMaxAccess("readonly")
cpqDaTapeCountersTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1), )
cpqDaTapeCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaTapeCountersCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaTapeCountersBusIndex"), (0, "CPQIDA-MIB", "cpqDaTapeCountersScsiIdIndex"), (0, "CPQIDA-MIB", "cpqDaTapeCountersLunIndex"))
cpqDaTapeCountersCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaTapeCountersBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeCountersScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeCountersLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeCountersReWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 5), Counter32()).setMaxAccess("readonly")
cpqDaTapeCountersReReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
cpqDaTapeCountersTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
cpqDaTapeCountersTotalUncorrectable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 8), Counter32()).setMaxAccess("readonly")
cpqDaTapeCountersTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 10, 1, 1, 9), Counter32()).setMaxAccess("readonly")
cpqDaTapeLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1), )
cpqDaTapeLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), (0, "CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), (0, "CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), (0, "CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"))
cpqDaTapeLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqDaTapeLibraryScsiBus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeLibraryScsiTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeLibraryScsiLun = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqDaTapeLibraryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
cpqDaTapeLibraryFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqDaTapeLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5),))).setMaxAccess("readonly")
cpqDaTapeLibraryDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("closed", 3), ("open", 4),))).setMaxAccess("readonly")
cpqDaTapeLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 10), Integer32()).setMaxAccess("readonly")
cpqDaTapeLibraryOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 11), Integer32()).setMaxAccess("readonly")
cpqDaTapeLibraryLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqDaTapeLibraryStatHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 13), Counter32()).setMaxAccess("readonly")
cpqDaTapeLibraryStatMoves = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 14), Counter32()).setMaxAccess("readonly")
cpqDaTapeLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,60))).setMaxAccess("readonly")
cpqDaTapeLibraryCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3),))).setMaxAccess("readonly")
cpqDaTapeLibraryCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6),))).setMaxAccess("readonly")
cpqDaTapeLibraryDriveList2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqDaTapeLibraryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("parallelScsi", 2), ("sata", 3), ("sas", 4),))).setMaxAccess("readonly")
cpqDaTapeLibraryNegotiatedLinkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 2, 11, 1, 1, 20), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("rate-1-5", 2), ("rate-3-0", 3), ("rate-6-0", 4), ("rate-12-0", 5),))).setMaxAccess("readonly")
cpqDaTrapPkts = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 3, 1), Counter32()).setMaxAccess("readonly")
cpqDaTrapLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 3, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqDaTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 3, 3, 3), )
cpqDaTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 3, 3, 3, 1), ).setIndexNames((0, "CPQIDA-MIB", "cpqDaTrapLogIndex"))
cpqDaTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqDaTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 3001, 3002, 3003, 3004, 3005, 3006, 3007,)).clone(namedValues=NamedValues(("cpqDaLogDrvStatusChange", 1), ("cpqDaSpareStatusChange", 2), ("cpqDaPhyDrvStatusChange", 3), ("cpqDaPhyDrvThreshExceededTrap", 4), ("cpqDaAccelStatusChange", 5), ("cpqDaAccelBadDataTrap", 6), ("cpqDaAccelBatteryFailed", 7), ("cpqDa2LogDrvStatusChange", 3001), ("cpqDa2SpareStatusChange", 3002), ("cpqDa2PhyDrvStatusChange", 3003), ("cpqDa2PhyDrvThreshExceededTrap", 3004), ("cpqDa2AccelStatusChange", 3005), ("cpqDa2AccelBadDataTrap", 3006), ("cpqDa2AccelBatteryFailed", 3007),))).setMaxAccess("readonly")
cpqDaTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 3, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6,6)).setFixedLength(6)).setMaxAccess("readonly")
cpqDaLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,1)).setObjects(*(("CPQIDA-MIB", "cpqDaLogDrvStatus"),))
cpqDaSpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,2)).setObjects(*(("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"),))
cpqDaPhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,3)).setObjects(*(("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"),))
cpqDaPhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,4)).setObjects(*(("CPQIDA-MIB", "cpqDaPhyDrvThreshPassed"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"),))
cpqDaAccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,5)).setObjects(*(("CPQIDA-MIB", "cpqDaAccelStatus"),))
cpqDaAccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,6)).setObjects(*(("CPQIDA-MIB", "cpqDaAccelBadData"),))
cpqDaAccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232, 3) + (0,7)).setObjects(*(("CPQIDA-MIB", "cpqDaAccelBattery"),))
cpqDa2LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3001)).setObjects(*(("CPQIDA-MIB", "cpqDaLogDrvStatus"),))
cpqDa2SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3002)).setObjects(*(("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"),))
cpqDa2PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3003)).setObjects(*(("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"),))
cpqDa2PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3004)).setObjects(*(("CPQIDA-MIB", "cpqDaPhyDrvThreshPassed"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"),))
cpqDa2AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3005)).setObjects(*(("CPQIDA-MIB", "cpqDaAccelStatus"),))
cpqDa2AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3006)).setObjects(*(("CPQIDA-MIB", "cpqDaAccelBadData"),))
cpqDa2AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3007)).setObjects(*(("CPQIDA-MIB", "cpqDaAccelBattery"),))
cpqDa3LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3008)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaLogDrvStatus"),))
cpqDa3SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3009)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"),))
cpqDa3PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3010)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"),))
cpqDa3PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3011)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvThreshPassed"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"),))
cpqDa3AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3012)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaAccelStatus"),))
cpqDa3AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3013)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaAccelBadData"),))
cpqDa3AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3014)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaAccelBattery"),))
cpqDaCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3015)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrBoardStatus"),))
cpqDaCntlrActive = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3016)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrPartnerSlot"),))
cpqDa4SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3017)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareCntlrIndex"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"), ("CPQIDA-MIB", "cpqDaSpareBay"),))
cpqDa4PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3018)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"),))
cpqDa4PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3019)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"),))
cpqDaTapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3020)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryStatus"),))
cpqDaTapeLibraryDoorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3021)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryDoorStatus"),))
cpqDaTapeDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3022)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvStatus"),))
cpqDaTapeDriveCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3023)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"),))
cpqDaTapeDriveCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3024)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"),))
cpqDa5AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3025)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"), ("CPQIDA-MIB", "cpqDaAccelStatus"), ("CPQIDA-MIB", "cpqDaAccelErrCode"),))
cpqDa5AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3026)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"),))
cpqDa5AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3027)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"),))
cpqDa5CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3028)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrSlot"), ("CPQIDA-MIB", "cpqDaCntlrBoardStatus"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaCntlrSerialNumber"), ("CPQIDA-MIB", "cpqDaCntlrFWRev"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"),))
cpqDa5PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3029)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"), ("CPQIDA-MIB", "cpqDaPhyDrvFailureCode"),))
cpqDa5PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3030)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"),))
cpqDa2TapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3031)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryModel"), ("CPQIDA-MIB", "cpqDaTapeLibraryFWRev"), ("CPQIDA-MIB", "cpqDaTapeLibrarySerialNumber"), ("CPQIDA-MIB", "cpqDaTapeLibraryStatus"),))
cpqDa2TapeDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3032)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvName"), ("CPQIDA-MIB", "cpqDaTapeDrvFwRev"), ("CPQIDA-MIB", "cpqDaTapeDrvSerialNumber"), ("CPQIDA-MIB", "cpqDaTapeDrvStatus"),))
cpqDa6CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3033)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrIndex"), ("CPQIDA-MIB", "cpqDaCntlrBoardStatus"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaCntlrSerialNumber"), ("CPQIDA-MIB", "cpqDaCntlrFWRev"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"),))
cpqDa6LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3034)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaLogDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaLogDrvIndex"), ("CPQIDA-MIB", "cpqDaLogDrvStatus"),))
cpqDa6SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3035)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaSpareCntlrIndex"), ("CPQIDA-MIB", "cpqDaSparePhyDrvIndex"), ("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"), ("CPQIDA-MIB", "cpqDaSpareBay"),))
cpqDa6PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3036)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"), ("CPQIDA-MIB", "cpqDaPhyDrvFailureCode"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"),))
cpqDa6PhyDrvThreshPassedTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3037)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"), ("CPQIDA-MIB", "cpqDaPhyDrvBay"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"),))
cpqDa6AccelStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3038)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelCntlrIndex"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"), ("CPQIDA-MIB", "cpqDaAccelStatus"), ("CPQIDA-MIB", "cpqDaAccelErrCode"),))
cpqDa6AccelBadDataTrap = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3039)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelCntlrIndex"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"),))
cpqDa6AccelBatteryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3040)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaAccelCntlrIndex"), ("CPQIDA-MIB", "cpqDaAccelSerialNumber"), ("CPQIDA-MIB", "cpqDaAccelTotalMemory"),))
cpqDa6TapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3041)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryModel"), ("CPQIDA-MIB", "cpqDaTapeLibraryFWRev"), ("CPQIDA-MIB", "cpqDaTapeLibrarySerialNumber"), ("CPQIDA-MIB", "cpqDaTapeLibraryStatus"),))
cpqDa6TapeLibraryDoorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3042)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeLibraryCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiBus"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiTarget"), ("CPQIDA-MIB", "cpqDaTapeLibraryScsiLun"), ("CPQIDA-MIB", "cpqDaTapeLibraryModel"), ("CPQIDA-MIB", "cpqDaTapeLibraryFWRev"), ("CPQIDA-MIB", "cpqDaTapeLibrarySerialNumber"), ("CPQIDA-MIB", "cpqDaTapeLibraryDoorStatus"),))
cpqDa6TapeDriveStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3043)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvName"), ("CPQIDA-MIB", "cpqDaTapeDrvFwRev"), ("CPQIDA-MIB", "cpqDaTapeDrvSerialNumber"), ("CPQIDA-MIB", "cpqDaTapeDrvStatus"),))
cpqDa6TapeDriveCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3044)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvName"), ("CPQIDA-MIB", "cpqDaTapeDrvFwRev"), ("CPQIDA-MIB", "cpqDaTapeDrvSerialNumber"),))
cpqDa6TapeDriveCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3045)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaTapeDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvBusIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvScsiIdIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvLunIndex"), ("CPQIDA-MIB", "cpqDaTapeDrvName"), ("CPQIDA-MIB", "cpqDaTapeDrvFwRev"), ("CPQIDA-MIB", "cpqDaTapeDrvSerialNumber"),))
cpqDa7PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3046)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvLocationString"), ("CPQIDA-MIB", "cpqDaPhyDrvType"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"), ("CPQIDA-MIB", "cpqDaPhyDrvFailureCode"), ("CPQIDA-MIB", "cpqDaPhyDrvStatus"), ("CPQIDA-MIB", "cpqDaPhyDrvBusNumber"),))
cpqDa7SpareStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3047)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaSpareCntlrIndex"), ("CPQIDA-MIB", "cpqDaSparePhyDrvIndex"), ("CPQIDA-MIB", "cpqDaSpareStatus"), ("CPQIDA-MIB", "cpqDaSpareLocationString"), ("CPQIDA-MIB", "cpqDaSpareBusNumber"),))
cpqDaCntlrPartnerStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3048)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaCntlrIndex"), ("CPQIDA-MIB", "cpqDaCntlrModel"), ("CPQIDA-MIB", "cpqDaCntlrSerialNumber"), ("CPQIDA-MIB", "cpqDaCntlrPartnerSerialNumber"), ("CPQIDA-MIB", "cpqDaCntlrPartnerBoardStatus"),))
cpqDaPhyDrvSSDWearStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,3049)).setObjects(*(("CPQIDA-MIB", "sysName"), ("CPQIDA-MIB", "cpqHoTrapFlags"), ("CPQIDA-MIB", "cpqDaCntlrHwLocation"), ("CPQIDA-MIB", "cpqDaPhyDrvCntlrIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvIndex"), ("CPQIDA-MIB", "cpqDaPhyDrvLocationString"), ("CPQIDA-MIB", "cpqDaPhyDrvType"), ("CPQIDA-MIB", "cpqDaPhyDrvModel"), ("CPQIDA-MIB", "cpqDaPhyDrvFWRev"), ("CPQIDA-MIB", "cpqDaPhyDrvSerialNum"), ("CPQIDA-MIB", "cpqDaPhyDrvSSDWearStatus"),))
mibBuilder.exportSymbols("CPQIDA-MIB", cpqDaPhyDrvFunctTest1=cpqDaPhyDrvFunctTest1, cpqDaTapeCountersTable=cpqDaTapeCountersTable, cpqDaCntlrOperatingMode=cpqDaCntlrOperatingMode, cpqDaPhyDrvCondition=cpqDaPhyDrvCondition, cpqDaPhyDrvHotPlugs=cpqDaPhyDrvHotPlugs, cpqDaPhyDrvQualifier=cpqDaPhyDrvQualifier, cpqDaPhyDrvThrFunctTest3=cpqDaPhyDrvThrFunctTest3, cpqDaPhyDrvPathBoxOnConnector=cpqDaPhyDrvPathBoxOnConnector, cpqDaOsNetWare3x=cpqDaOsNetWare3x, cpqDaCntlrEncryptCryptoOfficerPwdSetStatus=cpqDaCntlrEncryptCryptoOfficerPwdSetStatus, cpqDaSpareCntlrIndex=cpqDaSpareCntlrIndex, cpqDaLogDrvAvailSprAvailableSpareExtended=cpqDaLogDrvAvailSprAvailableSpareExtended, cpqDaPhyDrvUserDesc=cpqDaPhyDrvUserDesc, cpqDaPhyDrvPathCurrentRole=cpqDaPhyDrvPathCurrentRole, cpqDaPhyDrvRotationalSpeed=cpqDaPhyDrvRotationalSpeed, cpqDriveArray=cpqDriveArray, cpqDaTapeLibrary=cpqDaTapeLibrary, cpqDaTapeDrvCondition=cpqDaTapeDrvCondition, cpqDaLogDrvPerfWrites=cpqDaLogDrvPerfWrites, cpqDaLogDrvCondition=cpqDaLogDrvCondition, cpqDaCntlrProductRev=cpqDaCntlrProductRev, cpqDaSpareStatusChange=cpqDaSpareStatusChange, cpqDaCntlrEncryptionStatus=cpqDaCntlrEncryptionStatus, cpqDaPhyDrvHWrites=cpqDaPhyDrvHWrites, cpqDaPhyDrvPathTable=cpqDaPhyDrvPathTable, cpqDaLogDrvCacheVolAccelNoOfWriteHits=cpqDaLogDrvCacheVolAccelNoOfWriteHits, cpqDaAccelCntlrIndex=cpqDaAccelCntlrIndex, cpqDaPhyDrvThrRecvReadErrs=cpqDaPhyDrvThrRecvReadErrs, cpqDaNw3xFatalWrites=cpqDaNw3xFatalWrites, cpqDaPhyDrvNotReadyErrs=cpqDaPhyDrvNotReadyErrs, cpqDa5AccelBadDataTrap=cpqDa5AccelBadDataTrap, cpqDaTapeCountersTotalBytes=cpqDaTapeCountersTotalBytes, cpqDaSpareStatus=cpqDaSpareStatus, cpqDaMibRev=cpqDaMibRev, cpqDaPhyDrvStatus=cpqDaPhyDrvStatus, cpqDaPhyDrvTemperatureThreshold=cpqDaPhyDrvTemperatureThreshold, cpqDaSpareBusNumber=cpqDaSpareBusNumber, cpqDaAccelReadErrs=cpqDaAccelReadErrs, cpqDaPhyDrvHSeekErrs=cpqDaPhyDrvHSeekErrs, cpqDaCntlrSlot=cpqDaCntlrSlot, cpqDaPhyDrvStatusChange=cpqDaPhyDrvStatusChange, cpqDaPhyDrvCntlrIndex=cpqDaPhyDrvCntlrIndex, cpqDaMibRevMajor=cpqDaMibRevMajor, cpqDaCntlrTable=cpqDaCntlrTable, cpqDaTapeCountersBusIndex=cpqDaTapeCountersBusIndex, cpqDaManagedCableFaultCode=cpqDaManagedCableFaultCode, cpqDaLogDrvCacheVolAccelNoOfReadHits=cpqDaLogDrvCacheVolAccelNoOfReadHits, cpqDaPhyDrvPathCntlrIndex=cpqDaPhyDrvPathCntlrIndex, cpqDaLogDrvPerf=cpqDaLogDrvPerf, cpqDaPhyDrvCurrentTemperature=cpqDaPhyDrvCurrentTemperature, cpqDaPhyDrvMediaErrs=cpqDaPhyDrvMediaErrs, cpqDaLogDrvPhyDrvIDs=cpqDaLogDrvPhyDrvIDs, cpqDaPhyDrvSeeks=cpqDaPhyDrvSeeks, cpqDaCntlrUnencryptedLogDrvCreationPolicy=cpqDaCntlrUnencryptedLogDrvCreationPolicy, cpqDaAccelMemory=cpqDaAccelMemory, cpqDaTapeCountersScsiIdIndex=cpqDaTapeCountersScsiIdIndex, cpqDaCntlrStatusChange=cpqDaCntlrStatusChange, cpqDaLogDrvCacheVolAccelNoOfReadMissTotal=cpqDaLogDrvCacheVolAccelNoOfReadMissTotal, cpqDaLogDrvCacheVolumeAccelEntry=cpqDaLogDrvCacheVolumeAccelEntry, cpqDaNw3xTotalReads=cpqDaNw3xTotalReads, cpqDaNw3xCntlrIndex=cpqDaNw3xCntlrIndex, cpqDaPhyDrvThrEntry=cpqDaPhyDrvThrEntry, cpqDaTapeDrvLunIndex=cpqDaTapeDrvLunIndex, cpqDaTrapLogIndex=cpqDaTrapLogIndex, cpqDaPhyDrvSmartCarrierBootldrFWRev=cpqDaPhyDrvSmartCarrierBootldrFWRev, cpqDaPhyDrvThrOtherTimeouts=cpqDaPhyDrvThrOtherTimeouts, cpqDaPhyDrvPathEntry=cpqDaPhyDrvPathEntry, cpqDaNw3xPollType=cpqDaNw3xPollType, cpqDaPhyDrvThrCntlrIndex=cpqDaPhyDrvThrCntlrIndex, cpqDaPhyDrvThrIrqDeglitches=cpqDaPhyDrvThrIrqDeglitches, cpqDaCntlr=cpqDaCntlr, cpqDaTapeCountersTotalErrors=cpqDaTapeCountersTotalErrors, cpqDaTapeDrvEntry=cpqDaTapeDrvEntry, cpqDaLogDrvSSDSmartPathStatus=cpqDaLogDrvSSDSmartPathStatus, cpqDaLogDrvCacheVolAccelNoOfReadMissSkip=cpqDaLogDrvCacheVolAccelNoOfReadMissSkip, cpqDaPhyDrvThrMediaErrs=cpqDaPhyDrvThrMediaErrs, cpqDaPhyDrvThrIndex=cpqDaPhyDrvThrIndex, cpqDaPhyDrvSpinUpErrs=cpqDaPhyDrvSpinUpErrs, cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoad=cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoad, cpqDaPhyDrvFunctTest3=cpqDaPhyDrvFunctTest3, cpqDaPhyDrvThrFunctTest2=cpqDaPhyDrvThrFunctTest2, cpqDa2PhyDrvThreshPassedTrap=cpqDa2PhyDrvThreshPassedTrap, cpqDaManagedCableVendorSerialNumber=cpqDaManagedCableVendorSerialNumber, cpqDaCntlrFWRev=cpqDaCntlrFWRev, cpqDaPhyDrvErrEntry=cpqDaPhyDrvErrEntry, cpqDaLogDrvPerfTotalIO=cpqDaLogDrvPerfTotalIO, cpqDa3PhyDrvThreshPassedTrap=cpqDa3PhyDrvThreshPassedTrap, cpqDaPhyDrvThrHardWriteErrs=cpqDaPhyDrvThrHardWriteErrs, cpqDaAccelBatteryFailed=cpqDaAccelBatteryFailed, cpqDaPhyDrvThrTable=cpqDaPhyDrvThrTable, cpqDaCntlrPartnerBoardStatus=cpqDaCntlrPartnerBoardStatus, cpqDaTapeDrvType=cpqDaTapeDrvType, cpqDaTapeCountersReReads=cpqDaTapeCountersReReads, cpqDaAccelBattery=cpqDaAccelBattery, cpqDaCntlrPerfVersion=cpqDaCntlrPerfVersion, cpqDaPhyDrvThrViFunctTest2=cpqDaPhyDrvThrViFunctTest2, cpqDaPhyDrvConfigurationStatus=cpqDaPhyDrvConfigurationStatus, cpqDaComponent=cpqDaComponent, cpqDaCntlrEncryptCspNvramStatus=cpqDaCntlrEncryptCspNvramStatus, cpqDaCntlrSerialNumber=cpqDaCntlrSerialNumber, cpqDaNw3xVolLogDrvIndex=cpqDaNw3xVolLogDrvIndex, cpqDaLogDrvCacheVolAccelNoOfWriteMissSkip=cpqDaLogDrvCacheVolAccelNoOfWriteMissSkip, cpqDaNw3xCorrReads=cpqDaNw3xCorrReads, cpqDaManagedCableIndex=cpqDaManagedCableIndex, cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoadH=cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoadH, cpqDaLogDrv=cpqDaLogDrv, cpqDaTapeCountersCntlrIndex=cpqDaTapeCountersCntlrIndex, cpqDaManagedCableStatus=cpqDaManagedCableStatus, cpqDaTapeDrvNegotiatedLinkRate=cpqDaTapeDrvNegotiatedLinkRate, cpqDaPhyDrvOtherTimeouts=cpqDaPhyDrvOtherTimeouts, cpqDaPhyDrvSenseKey=cpqDaPhyDrvSenseKey, cpqDaLogDrvPhyDrvExtAttachEntry=cpqDaLogDrvPhyDrvExtAttachEntry, cpqDaPhyDrvErrType=cpqDaPhyDrvErrType, cpqDaTapeLibraryDriveList2=cpqDaTapeLibraryDriveList2, cpqDaPhyDrvRecvReadErrs=cpqDaPhyDrvRecvReadErrs, cpqDaLogDrvPerfAvgQueueDepth=cpqDaLogDrvPerfAvgQueueDepth, cpqDaLogDrvSplitMirrorBackupLogDrv=cpqDaLogDrvSplitMirrorBackupLogDrv, cpqDaPhyDrvThrHotPlugs=cpqDaPhyDrvThrHotPlugs, cpqDaLogDrvCacheVolAccelCacheLineSize=cpqDaLogDrvCacheVolAccelCacheLineSize, cpqDaTapeDrvCleanTapeRepl=cpqDaTapeDrvCleanTapeRepl, cpqDaPhyDrvThrHardReadErrs=cpqDaPhyDrvThrHardReadErrs, cpqDaManagedCableHostConnector=cpqDaManagedCableHostConnector, cpqDaCntlrPerfCntlrIndex=cpqDaCntlrPerfCntlrIndex, cpqDaPhyDrvScsiStatus=cpqDaPhyDrvScsiStatus, cpqDaNw3xLogDrvIndex=cpqDaNw3xLogDrvIndex, cpqDaTapeDrvHotPlug=cpqDaTapeDrvHotPlug, cpqDaAccelStatus=cpqDaAccelStatus, cpqDaPhyDrvMultipathAccess=cpqDaPhyDrvMultipathAccess, cpqDaLogDrvSprRplcAttachExtIndex=cpqDaLogDrvSprRplcAttachExtIndex, cpqDaLogDrvLogDrvExtended=cpqDaLogDrvLogDrvExtended, cpqDaPhyDrvThrSpinupTime=cpqDaPhyDrvThrSpinupTime, cpqDaTapeCounters=cpqDaTapeCounters, cpqDaCntlrRedundancyType=cpqDaCntlrRedundancyType, cpqDaTapeLibraryStatusChange=cpqDaTapeLibraryStatusChange, cpqDaPhyDrvThrBadRecvWrites=cpqDaPhyDrvThrBadRecvWrites, cpqDaTrapPkts=cpqDaTrapPkts, cpqDaPhyDrvPowerOnHours=cpqDaPhyDrvPowerOnHours, cpqDaPhyDrvType=cpqDaPhyDrvType, cpqDaLogDrvPerfEntry=cpqDaLogDrvPerfEntry, cpqDaCntlrEncryptCntlrPwdAvailStatus=cpqDaCntlrEncryptCntlrPwdAvailStatus, cpqDaPhyDrvFormatErrs=cpqDaPhyDrvFormatErrs, cpqDaAccelBadData=cpqDaAccelBadData, cpqDaLogDrvMultipathAccess=cpqDaLogDrvMultipathAccess, cpqDaPhyDrvHSeeks=cpqDaPhyDrvHSeeks, cpqDaSparePhyDrvIndex=cpqDaSparePhyDrvIndex, cpqDa6AccelBadDataTrap=cpqDa6AccelBadDataTrap, cpqDaPhyDrvUsedReallocs=cpqDaPhyDrvUsedReallocs, cpqDa5PhyDrvStatusChange=cpqDa5PhyDrvStatusChange, cpqDaCntlrCondition=cpqDaCntlrCondition, cpqDaLogDrvStripeSize=cpqDaLogDrvStripeSize, cpqDaTapeLibraryScsiBus=cpqDaTapeLibraryScsiBus, cpqDaPhyDrvAuthenticationStatus=cpqDaPhyDrvAuthenticationStatus, cpqDaLogDrvPerfCacheMisses=cpqDaLogDrvPerfCacheMisses, cpqDaLogDrvPhyDrvExtAttachTable=cpqDaLogDrvPhyDrvExtAttachTable, cpqDaAccelMemoryTransferRate=cpqDaAccelMemoryTransferRate, cpqDaPhyDrvErrDesc=cpqDaPhyDrvErrDesc, cpqDa2TapeDriveStatusChange=cpqDa2TapeDriveStatusChange, cpqDa2AccelBadDataTrap=cpqDa2AccelBadDataTrap, cpqDaTapeDrvCleanReq=cpqDaTapeDrvCleanReq, cpqDaLogDrvNmbrOfParityGroups=cpqDaLogDrvNmbrOfParityGroups, cpqDaAccelTable=cpqDaAccelTable, cpqDaCntlrBoardCondition=cpqDaCntlrBoardCondition, cpqDaMibCondition=cpqDaMibCondition, cpqDaTapeCountersLunIndex=cpqDaTapeCountersLunIndex, cpqDaLogDrvPerfReads=cpqDaLogDrvPerfReads, cpqDaPhyDrvCamStatus=cpqDaPhyDrvCamStatus, cpqDaPhyDrvFunctTest2=cpqDaPhyDrvFunctTest2, cpqDaLogDrvCacheVolAccelCacheState=cpqDaLogDrvCacheVolAccelCacheState, cpqDaCntlrHBAModeOptionRomRev=cpqDaCntlrHBAModeOptionRomRev, cpqDaCntlrOptionRomRev=cpqDaCntlrOptionRomRev, cpqDaTapeDrvPlacement=cpqDaTapeDrvPlacement, cpqDa6AccelStatusChange=cpqDa6AccelStatusChange, cpqDaAccelCondition=cpqDaAccelCondition, cpqDaCntlrHwLocation=cpqDaCntlrHwLocation, cpqDaCntlrPerfCommandCount=cpqDaCntlrPerfCommandCount, cpqDaPhyDrvCurrentWidth=cpqDaPhyDrvCurrentWidth, cpqDaPhyDrvHardReadErrs=cpqDaPhyDrvHardReadErrs, cpqDaTapeLibraryDoorStatusChange=cpqDaTapeLibraryDoorStatusChange, cpqDaLogDrvCacheVolAccelLogDrvIndex=cpqDaLogDrvCacheVolAccelLogDrvIndex, cpqDaNw3xTotalWrites=cpqDaNw3xTotalWrites, cpqDaCntlrPerfAvgLatency=cpqDaCntlrPerfAvgLatency, cpqDaPhyDrvErrIndex=cpqDaPhyDrvErrIndex, cpqDaAccelReadMemory=cpqDaAccelReadMemory, cpqDaPhyDrv=cpqDaPhyDrv, cpqDa2AccelBatteryFailed=cpqDa2AccelBatteryFailed, cpqDaSparePercentRebuild=cpqDaSparePercentRebuild, cpqDaPhyDrvMaximumTemperature=cpqDaPhyDrvMaximumTemperature, cpqDaPhyDrvPhyCount=cpqDaPhyDrvPhyCount, cpqDa7PhyDrvStatusChange=cpqDa7PhyDrvStatusChange, cpqDaPhyDrvBay=cpqDaPhyDrvBay, cpqDaManagedCableVendorPartNumber=cpqDaManagedCableVendorPartNumber, cpqDaPhyDrvHotPlug=cpqDaPhyDrvHotPlug, cpqDaPhyDrvThrViSpinupTime=cpqDaPhyDrvThrViSpinupTime, cpqDaPhyDrvNegotiatedLinkRate=cpqDaPhyDrvNegotiatedLinkRate, cpqDaOsCommonModuleEntry=cpqDaOsCommonModuleEntry, cpqDaTrapTime=cpqDaTrapTime, cpqDaPhyDrvIndex=cpqDaPhyDrvIndex, cpqDaLogDrvOsName=cpqDaLogDrvOsName, cpqDaLogDrvCacheVolAccelNoOfReadHitsH=cpqDaLogDrvCacheVolAccelNoOfReadHitsH, cpqDaTapeCountersReWrites=cpqDaTapeCountersReWrites, cpqDaLogDrvPhyDrvAttachExtIndex=cpqDaLogDrvPhyDrvAttachExtIndex, cpqDa2SpareStatusChange=cpqDa2SpareStatusChange, cpqDa6TapeLibraryDoorStatusChange=cpqDa6TapeLibraryDoorStatusChange, cpqDaCntlrNumberOfExternalPorts=cpqDaCntlrNumberOfExternalPorts, cpqDaCntlrEncryptedLogDrvCreationPolicy=cpqDaCntlrEncryptedLogDrvCreationPolicy, cpqDaInterface=cpqDaInterface, cpqDaTapeLibraryCntlrIndex=cpqDaTapeLibraryCntlrIndex, cpqDaLogDrvBlinkTime=cpqDaLogDrvBlinkTime, cpqDaTapeDrvSerialNumber=cpqDaTapeDrvSerialNumber, cpqDaLogDrvSprRplcExtAttachTable=cpqDaLogDrvSprRplcExtAttachTable, cpqDaPhyDrvThrRecvWriteErrs=cpqDaPhyDrvThrRecvWriteErrs, cpqDaAccelErrCode=cpqDaAccelErrCode, cpqDaTapeDrvTable=cpqDaTapeDrvTable, cpqDaPhyDrvSSDPercntEndrnceUsed=cpqDaPhyDrvSSDPercntEndrnceUsed, cpqDaLogDrvCacheVolAccelNoOfReadMissLocked=cpqDaLogDrvCacheVolAccelNoOfReadMissLocked, cpqDaTrapLogTable=cpqDaTrapLogTable, cpqDaCntlrIndex=cpqDaCntlrIndex, cpqDaPhyDrvBusFaults=cpqDaPhyDrvBusFaults, cpqDaPhyDrvThr=cpqDaPhyDrvThr, cpqDa6AccelBatteryFailed=cpqDa6AccelBatteryFailed, cpqDaPhyDrvEntry=cpqDaPhyDrvEntry, cpqDa6SpareStatusChange=cpqDa6SpareStatusChange, cpqDaOsCommonModuleIndex=cpqDaOsCommonModuleIndex, cpqDaPhyDrvRefHours=cpqDaPhyDrvRefHours, cpqDaSpareReplacedDrvBay=cpqDaSpareReplacedDrvBay, cpqDaPhyDrvPreFailMonitoring=cpqDaPhyDrvPreFailMonitoring, cpqDaCntlrPerfInstance=cpqDaCntlrPerfInstance, cpqDaCntlrExpandPriority=cpqDaCntlrExpandPriority, cpqDaLogDrvHasAccel=cpqDaLogDrvHasAccel, cpqDaPhyDrvSmartStatus=cpqDaPhyDrvSmartStatus, cpqDaPhyDrvThrViFunctTest1=cpqDaPhyDrvThrViFunctTest1, cpqDaPhyDrvThrHSeekErrs=cpqDaPhyDrvThrHSeekErrs, cpqDaCntlrRedundancyError=cpqDaCntlrRedundancyError, cpqDaPhyDrvPathHostConnector=cpqDaPhyDrvPathHostConnector, cpqDaLogDrvPerfCntlrIndex=cpqDaLogDrvPerfCntlrIndex, cpqDaPhyDrvTime=cpqDaPhyDrvTime, cpqDaPhyDrvSpinupTime=cpqDaPhyDrvSpinupTime, cpqDa6PhyDrvThreshPassedTrap=cpqDa6PhyDrvThreshPassedTrap, cpqDaLogDrvCacheVolAccelNoOfWriteMissSkipH=cpqDaLogDrvCacheVolAccelNoOfWriteMissSkipH, cpqDaPhyDrvModel=cpqDaPhyDrvModel, cpqDaTrapLogMaxSize=cpqDaTrapLogMaxSize, cpqDaTapeDrvBusIndex=cpqDaTapeDrvBusIndex, cpqDaNw3xPollTime=cpqDaNw3xPollTime, cpqDaAccelEntry=cpqDaAccelEntry, cpqDaTapeLibraryModel=cpqDaTapeLibraryModel, cpqDaPhyDrvThrDrqTimeouts=cpqDaPhyDrvThrDrqTimeouts, cpqDaPhyDrvBlinkTime=cpqDaPhyDrvBlinkTime, cpqDaPhyDrvHostConnector=cpqDaPhyDrvHostConnector, cpqDaLogDrvCacheVolAccelWritePolicy=cpqDaLogDrvCacheVolAccelWritePolicy, cpqDaNw3xFatalReads=cpqDaNw3xFatalReads, cpqDaSpareTable=cpqDaSpareTable, cpqDaLogDrvCacheVolAccelNoOfWriteMissLockedH=cpqDaLogDrvCacheVolAccelNoOfWriteMissLockedH, cpqDa6PhyDrvStatusChange=cpqDa6PhyDrvStatusChange, cpqDaTapeDrvProtocol=cpqDaTapeDrvProtocol)
mibBuilder.exportSymbols("CPQIDA-MIB", cpqDaCntlrStndIntr=cpqDaCntlrStndIntr, cpqDaLogDrvAvailSpares=cpqDaLogDrvAvailSpares, cpqDaLogDrvSpareReplaceMap=cpqDaLogDrvSpareReplaceMap, cpqDaCntlrPartnerStatusChange=cpqDaCntlrPartnerStatusChange, cpqDaOsCommonModuleDate=cpqDaOsCommonModuleDate, cpqDaLogDrvPercentRebuild=cpqDaLogDrvPercentRebuild, cpqDaManagedCableEntry=cpqDaManagedCableEntry, cpqDaPhyDrvIrqDeglitches=cpqDaPhyDrvIrqDeglitches, cpqDaLogDrvCacheVolAccelWriteCacheHitRate=cpqDaLogDrvCacheVolAccelWriteCacheHitRate, cpqDa2LogDrvStatusChange=cpqDa2LogDrvStatusChange, cpqDaManagedCableVendorRevision=cpqDaManagedCableVendorRevision, cpqDaLogDrvCacheVolAccelReadCacheHitRate=cpqDaLogDrvCacheVolAccelReadCacheHitRate, cpqDaLogDrvStatusChange=cpqDaLogDrvStatusChange, cpqDaAccelStatusChange=cpqDaAccelStatusChange, cpqDaPhyDrvLocationString=cpqDaPhyDrvLocationString, cpqDa3AccelBatteryFailed=cpqDa3AccelBatteryFailed, cpqDaTapeLibraryDriveList=cpqDaTapeLibraryDriveList, cpqDaSpareReplacedDrvBusNumber=cpqDaSpareReplacedDrvBusNumber, cpqDaLogDrvCacheVolAccelNoOfWriteMissTotalH=cpqDaLogDrvCacheVolAccelNoOfWriteMissTotalH, cpqDaLogDrvRebuildBlks=cpqDaLogDrvRebuildBlks, cpqDaLogDrvAvailSprLogDrvExtended=cpqDaLogDrvAvailSprLogDrvExtended, cpqDaTapeDrvMagSize=cpqDaTapeDrvMagSize, cpqDaPhyDrvThrSpinUpErrs=cpqDaPhyDrvThrSpinUpErrs, cpqDaNw3xDriverStatTable=cpqDaNw3xDriverStatTable, cpqDaPhyDrvThrReallocAborts=cpqDaPhyDrvThrReallocAborts, cpqDaPhyDrvSerialNum=cpqDaPhyDrvSerialNum, cpqDaCntlrNumberOfBuses=cpqDaCntlrNumberOfBuses, cpqDaCntlrEncryptCntlrPwdSetStatus=cpqDaCntlrEncryptCntlrPwdSetStatus, cpqDaCntlrEntry=cpqDaCntlrEntry, cpqDaCntlrCurrentTemp=cpqDaCntlrCurrentTemp, cpqDaTapeDrvCleanTapeCount=cpqDaTapeDrvCleanTapeCount, cpqDaCntlrPartnerSlot=cpqDaCntlrPartnerSlot, cpqDaLogDrvCacheVolAccelCachingAlgorithm=cpqDaLogDrvCacheVolAccelCachingAlgorithm, cpqDaNw3xDriverVer=cpqDaNw3xDriverVer, cpqDaLogDrvPerfTable=cpqDaLogDrvPerfTable, cpqDaManagedCableLength=cpqDaManagedCableLength, cpqDaPhyDrvSSDWearStatusChange=cpqDaPhyDrvSSDWearStatusChange, cpqDaPhyDrvHasMonInfo=cpqDaPhyDrvHasMonInfo, cpqDaAccelBadDataTrap=cpqDaAccelBadDataTrap, cpqDaTapeLibraryCurrentSpeed=cpqDaTapeLibraryCurrentSpeed, cpqDaLogDrvAutoRel=cpqDaLogDrvAutoRel, cpqDa3PhyDrvStatusChange=cpqDa3PhyDrvStatusChange, cpqDaCntlrDriveWriteCacheState=cpqDaCntlrDriveWriteCacheState, cpqDaTapeDriveStatusChange=cpqDaTapeDriveStatusChange, cpqDaPhyDrvTable=cpqDaPhyDrvTable, cpqDaPhyDrvFactReallocs=cpqDaPhyDrvFactReallocs, cpqDa7SpareStatusChange=cpqDa7SpareStatusChange, cpqDaOsCommon=cpqDaOsCommon, cpqDaPhyDrvThrBusFaults=cpqDaPhyDrvThrBusFaults, cpqDaTapeLibraryOverallCondition=cpqDaTapeLibraryOverallCondition, cpqDaCntlrNumberOfInternalPorts=cpqDaCntlrNumberOfInternalPorts, cpqDaLogDrvCacheVolAccelNoOfWriteMissLocked=cpqDaLogDrvCacheVolAccelNoOfWriteMissLocked, cpqDa3LogDrvStatusChange=cpqDa3LogDrvStatusChange, cpqDa4SpareStatusChange=cpqDa4SpareStatusChange, cpqDaLogDrvSize=cpqDaLogDrvSize, cpqDaPhyDrvRecvWriteErrs=cpqDaPhyDrvRecvWriteErrs, cpqDaAccelBackupPowerSource=cpqDaAccelBackupPowerSource, cpqDaOsCommonModuleTable=cpqDaOsCommonModuleTable, cpqDaNw3xVolMapTable=cpqDaNw3xVolMapTable, cpqDa2AccelStatusChange=cpqDa2AccelStatusChange, cpqDa6TapeDriveCleaningRequired=cpqDa6TapeDriveCleaningRequired, cpqDaPhyDrvThrPostErrs=cpqDaPhyDrvThrPostErrs, cpqDaTapeLibraryScsiTarget=cpqDaTapeLibraryScsiTarget, cpqDaPhyDrvThrSeekErrs=cpqDaPhyDrvThrSeekErrs, cpqDaLogDrvFaultTol=cpqDaLogDrvFaultTol, cpqDaLogDrvPerfSampleInterval=cpqDaLogDrvPerfSampleInterval, cpqDaTapeLibraryCurrentWidth=cpqDaTapeLibraryCurrentWidth, cpqDaTapeDrvName=cpqDaTapeDrvName, cpqDaManagedCableTable=cpqDaManagedCableTable, cpqDaLogDrvSprRplcCntlrExtended=cpqDaLogDrvSprRplcCntlrExtended, cpqDaPhyDrvPathStatus=cpqDaPhyDrvPathStatus, cpqDaAccelReadCachePercent=cpqDaAccelReadCachePercent, cpqDaCntlrHbaFWRev=cpqDaCntlrHbaFWRev, cpqDaCntlrPerfSampleInterval=cpqDaCntlrPerfSampleInterval, cpqDaCntlrPerfCpuPercentBusy=cpqDaCntlrPerfCpuPercentBusy, cpqDaPhyDrvHReads=cpqDaPhyDrvHReads, cpqDaSpareBay=cpqDaSpareBay, cpqDaPhyDrvThrSpinupRetries=cpqDaPhyDrvThrSpinupRetries, cpqDaLogDrvEncryptionStatus=cpqDaLogDrvEncryptionStatus, cpqDaPhyDrvThrViUsedReallocs=cpqDaPhyDrvThrViUsedReallocs, cpqDaTapeDrvFwRev=cpqDaTapeDrvFwRev, cpqDaPhyDrvLocation=cpqDaPhyDrvLocation, cpqDaTapeDrvCntlrIndex=cpqDaTapeDrvCntlrIndex, cpqDaAccelWriteCachePercent=cpqDaAccelWriteCachePercent, cpqDaLogDrvCacheVolAccelLoadFailures=cpqDaLogDrvCacheVolAccelLoadFailures, cpqDa5CntlrStatusChange=cpqDa5CntlrStatusChange, cpqDaPhyDrvThrFunctTest1=cpqDaPhyDrvThrFunctTest1, cpqDaPhyDrvThrAbortedCmds=cpqDaPhyDrvThrAbortedCmds, cpqDaTapeDrvLibraryDrive=cpqDaTapeDrvLibraryDrive, cpqDa2PhyDrvStatusChange=cpqDa2PhyDrvStatusChange, cpqDaTapeDriveCleaningRequired=cpqDaTapeDriveCleaningRequired, cpqDaPhyDrvBadTargetErrs=cpqDaPhyDrvBadTargetErrs, cpqDaCntlrEncryptFWLockStatus=cpqDaCntlrEncryptFWLockStatus, cpqDaSpareEntry=cpqDaSpareEntry, cpqDaTapeDriveCleanTapeReplace=cpqDaTapeDriveCleanTapeReplace, cpqDa6TapeLibraryStatusChange=cpqDa6TapeLibraryStatusChange, cpqDaPhyDrvPathIndex=cpqDaPhyDrvPathIndex, cpqDaSpareReplacedDrv=cpqDaSpareReplacedDrv, cpqDaManagedCableCntlrIndex=cpqDaManagedCableCntlrIndex, cpqDa6LogDrvStatusChange=cpqDa6LogDrvStatusChange, cpqDaTrap=cpqDaTrap, cpqDaPhyDrvPathDrvIndex=cpqDaPhyDrvPathDrvIndex, cpqDaLogDrvAvailSprCntlrExtended=cpqDaLogDrvAvailSprCntlrExtended, cpqDaCntlrActive=cpqDaCntlrActive, cpqDaLogDrvCacheVolAccelNoOfReadMissLockedH=cpqDaLogDrvCacheVolAccelNoOfReadMissLockedH, cpqDa5AccelBatteryFailed=cpqDa5AccelBatteryFailed, cpqDaPhyDrvPlacement=cpqDaPhyDrvPlacement, cpqDaPhyDrvThrNotReadyErrs=cpqDaPhyDrvThrNotReadyErrs, cpqDaLogDrvCntlrExtended=cpqDaLogDrvCntlrExtended, cpqDaLogDrvCacheVolAccelNoOfReadMissTotalH=cpqDaLogDrvCacheVolAccelNoOfReadMissTotalH, cpqDaPhyDrvThrHardwareErrs=cpqDaPhyDrvThrHardwareErrs, cpqDaPhyDrvBadRecvReads=cpqDaPhyDrvBadRecvReads, cpqDaPhyDrvErrCntlrIndex=cpqDaPhyDrvErrCntlrIndex, cpqDaCntlrBlinkTime=cpqDaCntlrBlinkTime, cpqDaPhyDrvBadRecvWrites=cpqDaPhyDrvBadRecvWrites, cpqDaOsCommonModulePurpose=cpqDaOsCommonModulePurpose, cpqDaLogDrvCacheVolAccelNoOfReadMissSkipH=cpqDaLogDrvCacheVolAccelNoOfReadMissSkipH, cpqDaTapeLibraryTable=cpqDaTapeLibraryTable, cpqDaNw3xCorrWrites=cpqDaNw3xCorrWrites, cpqDaPhyDrvBoxOnConnector=cpqDaPhyDrvBoxOnConnector, cpqDaTapeCountersEntry=cpqDaTapeCountersEntry, cpqDaTapeDrvScsiIdIndex=cpqDaTapeDrvScsiIdIndex, cpqDaAccelFailedBatteries=cpqDaAccelFailedBatteries, cpqDaNw3xVolCntlrIndex=cpqDaNw3xVolCntlrIndex, cpqDaAccelMemoryDataWidth=cpqDaAccelMemoryDataWidth, cpqDaPhyDrvSpinupRetries=cpqDaPhyDrvSpinupRetries, cpqDaAccelWriteErrs=cpqDaAccelWriteErrs, cpqDaCntlrCurrentRole=cpqDaCntlrCurrentRole, cpqDaLogDrvTable=cpqDaLogDrvTable, cpqDaLogDrvSprRplcLogDrvExtended=cpqDaLogDrvSprRplcLogDrvExtended, cpqDaCntlrModel=cpqDaCntlrModel, cpqDa3AccelBadDataTrap=cpqDa3AccelBadDataTrap, cpqDaAccelSerialNumber=cpqDaAccelSerialNumber, cpqDaPhyDrvDrqTimeouts=cpqDaPhyDrvDrqTimeouts, cpqDaCntlrPartnerBoardCondition=cpqDaCntlrPartnerBoardCondition, cpqDaLogDrvStatus=cpqDaLogDrvStatus, cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoad=cpqDaLogDrvCacheVolAccelNoOfWriteMissDoLoad, cpqDaLogDrvCacheVolAccelNoOfWriteMissTotal=cpqDaLogDrvCacheVolAccelNoOfWriteMissTotal, cpqDaPhyDrvThreshPassedTrap=cpqDaPhyDrvThreshPassedTrap, cpqDaCntlrAccessModuleStatus=cpqDaCntlrAccessModuleStatus, cpqDaTapeDrv=cpqDaTapeDrv, cpqDaLogDrvPerfSectorsRead=cpqDaLogDrvPerfSectorsRead, cpqDaTapeLibraryEntry=cpqDaTapeLibraryEntry, cpqDaNw3xVolMapEntry=cpqDaNw3xVolMapEntry, cpqDa4PhyDrvStatusChange=cpqDa4PhyDrvStatusChange, cpqDa5AccelStatusChange=cpqDa5AccelStatusChange, cpqDa3AccelStatusChange=cpqDa3AccelStatusChange, cpqDaTapeLibraryStatMoves=cpqDaTapeLibraryStatMoves, cpqDaPhyDrvBlock=cpqDaPhyDrvBlock, cpqDaTrapLogEntry=cpqDaTrapLogEntry, cpqDaPhyDrvThrViFunctTest3=cpqDaPhyDrvThrViFunctTest3, cpqDaLogDrvSprRplcReplacedPhysDrvExtended=cpqDaLogDrvSprRplcReplacedPhysDrvExtended, cpqDaOsCommonModuleVersion=cpqDaOsCommonModuleVersion, cpqDaCntlrPerfTable=cpqDaCntlrPerfTable, cpqDa6CntlrStatusChange=cpqDa6CntlrStatusChange, cpqDaLogDrvAvailSprAttachExtIndex=cpqDaLogDrvAvailSprAttachExtIndex, cpqDaLogDrvCntlrIndex=cpqDaLogDrvCntlrIndex, cpqDaNw3xVolMap=cpqDaNw3xVolMap, cpqDaLogDrvCacheVolAccelNoOfReadMissLoadingH=cpqDaLogDrvCacheVolAccelNoOfReadMissLoadingH, cpqDaLogDrvCacheVolAccelAssocType=cpqDaLogDrvCacheVolAccelAssocType, cpqDaCntlrPerf=cpqDaCntlrPerf, cpqDaLogDrvPerfCacheHits=cpqDaLogDrvPerfCacheHits, cpqDaLogDrvSprRplcExtAttachEntry=cpqDaLogDrvSprRplcExtAttachEntry, cpqDaNw3xDriverStatEntry=cpqDaNw3xDriverStatEntry, cpqDaTapeDrvFwSubtype=cpqDaTapeDrvFwSubtype, cpqDaPhyDrvNcqSupport=cpqDaPhyDrvNcqSupport, cpqDaPhyDrvThrBadTargetErrs=cpqDaPhyDrvThrBadTargetErrs, cpqDaPhyDrvErrTable=cpqDaPhyDrvErrTable, cpqDaTapeLibraryProtocol=cpqDaTapeLibraryProtocol, cpqDaSpareDrv=cpqDaSpareDrv, cpqDaAccelCapacitorCurrentTemp=cpqDaAccelCapacitorCurrentTemp, cpqDaLogDrvPerfInstance=cpqDaLogDrvPerfInstance, cpqDaAccelTotalMemory=cpqDaAccelTotalMemory, cpqDaTapeDrvStatus=cpqDaTapeDrvStatus, cpqDaPhyDrvSSDEstTimeRemainingHours=cpqDaPhyDrvSSDEstTimeRemainingHours, cpqDaLogDrvCacheVolIndex=cpqDaLogDrvCacheVolIndex, cpqDaLogDrvCacheVolAccelNoOfWriteMissLoadingH=cpqDaLogDrvCacheVolAccelNoOfWriteMissLoadingH, cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoadH=cpqDaLogDrvCacheVolAccelNoOfReadMissDoLoadH, cpqDaSpareLocationString=cpqDaSpareLocationString, cpqDaCntlrRebuildPriority=cpqDaCntlrRebuildPriority, cpqDaPhyDrvPostErrs=cpqDaPhyDrvPostErrs, cpqDaOsCommonCollectionReset=cpqDaOsCommonCollectionReset, cpqDaLogDrvCacheVolAccelNoOfReadMissLoading=cpqDaLogDrvCacheVolAccelNoOfReadMissLoading, cpqDaPhyDrvReallocAborts=cpqDaPhyDrvReallocAborts, cpqDaLogDrvPerfSectorsWritten=cpqDaLogDrvPerfSectorsWritten, cpqDaPhyDrvWrites=cpqDaPhyDrvWrites, cpqDaTapeCountersTotalUncorrectable=cpqDaTapeCountersTotalUncorrectable, cpqDaTapeLibraryStatHours=cpqDaTapeLibraryStatHours, cpqDaTapeLibraryStatus=cpqDaTapeLibraryStatus, cpqDaOsCommonModuleName=cpqDaOsCommonModuleName, cpqDaPhyDrvSeekErrs=cpqDaPhyDrvSeekErrs, cpqDaPhyDrvSenseCode=cpqDaPhyDrvSenseCode, cpqDaTapeLibraryLastError=cpqDaTapeLibraryLastError, cpqDaCntlrBoardStatus=cpqDaCntlrBoardStatus, cpqDaCntlrPerfEntry=cpqDaCntlrPerfEntry, cpqDaPhyDrvSmartCarrierAppFWRev=cpqDaPhyDrvSmartCarrierAppFWRev, cpqDaLogDrvRPIPercentComplete=cpqDaLogDrvRPIPercentComplete, cpqDaTapeLibraryNegotiatedLinkRate=cpqDaTapeLibraryNegotiatedLinkRate, cpqDaPhyDrvHardwareErrs=cpqDaPhyDrvHardwareErrs, cpqDaTapeLibrarySerialNumber=cpqDaTapeLibrarySerialNumber, cpqDaTapeLibraryCondition=cpqDaTapeLibraryCondition, cpqDaPhyDrvPathLocationString=cpqDaPhyDrvPathLocationString, cpqDaPhyDrvAbortedCmds=cpqDaPhyDrvAbortedCmds, cpqDaCntlrPartnerSerialNumber=cpqDaCntlrPartnerSerialNumber, cpqDaPhyDrvEncryptionStatus=cpqDaPhyDrvEncryptionStatus, cpqDaPhyDrvReads=cpqDaPhyDrvReads, cpqDaPhyDrvErrIDIndex=cpqDaPhyDrvErrIDIndex, cpqDaPhyDrvFailureCode=cpqDaPhyDrvFailureCode, cpqDaPhyDrvBusNumber=cpqDaPhyDrvBusNumber, cpqDaPhyDrvThrBadRecvReads=cpqDaPhyDrvThrBadRecvReads, cpqDa4PhyDrvThreshPassedTrap=cpqDa4PhyDrvThreshPassedTrap, cpqDaLogDrvAvalSprExtAttachTable=cpqDaLogDrvAvalSprExtAttachTable, cpqDaPhyDrvThreshPassed=cpqDaPhyDrvThreshPassed, cpqDaTapeDrvCurrentWidth=cpqDaTapeDrvCurrentWidth, cpqDaPhyDrvSataVersion=cpqDaPhyDrvSataVersion, cpqDaPhyDrvFWRev=cpqDaPhyDrvFWRev, cpqDaLogDrvPerfIndex=cpqDaLogDrvPerfIndex, cpqDaOsCommonPollFreq=cpqDaOsCommonPollFreq, cpqDaPhyDrvSSDWearStatus=cpqDaPhyDrvSSDWearStatus, cpqDaSpareRebuildBlks=cpqDaSpareRebuildBlks, cpqDa2TapeLibraryStatusChange=cpqDa2TapeLibraryStatusChange, cpqDaNw3xDriverName=cpqDaNw3xDriverName, cpqDaPhyDrvThrRefHours=cpqDaPhyDrvThrRefHours, cpqDaLogDrvSprRplcSparePhysDrvExtended=cpqDaLogDrvSprRplcSparePhysDrvExtended, cpqDaPhyDrvCurrentSpeed=cpqDaPhyDrvCurrentSpeed, cpqDaPhyDrvScsiOp=cpqDaPhyDrvScsiOp, cpqDa5PhyDrvThreshPassedTrap=cpqDa5PhyDrvThreshPassedTrap, cpqDaLogDrvCacheVolumeAccelTable=cpqDaLogDrvCacheVolumeAccelTable, cpqDaLogDrvPhyDrvExtended=cpqDaLogDrvPhyDrvExtended, cpqDaMibRevMinor=cpqDaMibRevMinor, cpqDa6TapeDriveCleanTapeReplace=cpqDa6TapeDriveCleanTapeReplace, cpqDaLogDrvCacheVolAccelNoOfWriteMissLoading=cpqDaLogDrvCacheVolAccelNoOfWriteMissLoading, cpqDaAccelBoardCurrentTemp=cpqDaAccelBoardCurrentTemp, cpqDaLogDrvPerfReadAheadSectors=cpqDaLogDrvPerfReadAheadSectors, cpqDaLogDrvRebuildingPhyDrv=cpqDaLogDrvRebuildingPhyDrv, cpqDaLogDrvCacheVolAccelNoOfWriteHitsH=cpqDaLogDrvCacheVolAccelNoOfWriteHitsH, cpqDaPhyDrvSize=cpqDaPhyDrvSize, cpqDa6TapeDriveStatusChange=cpqDa6TapeDriveStatusChange, cpqDaLogDrvCacheVolAccelCntlrIndex=cpqDaLogDrvCacheVolAccelCntlrIndex, cpqDaCntlrASICEncptSelfTestStatus=cpqDaCntlrASICEncptSelfTestStatus, cpqDaPhyDrvThrFormatErrs=cpqDaPhyDrvThrFormatErrs, cpqDaPhyDrvHardWriteErrs=cpqDaPhyDrvHardWriteErrs, cpqDaCntlrDriveOwnership=cpqDaCntlrDriveOwnership, cpqDaPhyDrvBlockValid=cpqDaPhyDrvBlockValid, cpqDaCntlrDaughterBoardType=cpqDaCntlrDaughterBoardType, cpqDaCntlrLastLockupCode=cpqDaCntlrLastLockupCode, cpqDaSpareCondition=cpqDaSpareCondition, cpqDaTapeDrvCurrentSpeed=cpqDaTapeDrvCurrentSpeed, cpqDaLogDrvAvalSprExtAttachEntry=cpqDaLogDrvAvalSprExtAttachEntry, cpqDaTrapType=cpqDaTrapType, cpqDaTapeLibraryScsiLun=cpqDaTapeLibraryScsiLun, cpqDaTapeLibraryFWRev=cpqDaTapeLibraryFWRev, cpqDaLogDrvEntry=cpqDaLogDrvEntry, cpqDa3SpareStatusChange=cpqDa3SpareStatusChange)
mibBuilder.exportSymbols("CPQIDA-MIB", cpqDaTapeLibraryDoorStatus=cpqDaTapeLibraryDoorStatus, cpqDaPhyDrvThrUsedReallocs=cpqDaPhyDrvThrUsedReallocs, cpqDaPhyDrvMediaType=cpqDaPhyDrvMediaType, cpqDaLogDrvIndex=cpqDaLogDrvIndex)
