#
# PySNMP MIB module CPQSCSI-MIB (http://pysnmp.sf.net)
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( compaq, cpqHoTrapFlags, ) = mibBuilder.importSymbols("CPQHOST-MIB", "compaq", "cpqHoTrapFlags")
( NotificationGroup, ModuleCompliance, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
( sysName, ) = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, enterprises, iso, Gauge32, NotificationType, ModuleIdentity, ObjectIdentity, Bits, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "enterprises", "iso", "Gauge32", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Bits", "Counter32")
( DisplayString, TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cpqScsi = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5))
cpqScsiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 1))
cpqScsiComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2))
cpqScsiTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 3))
cpqTapeComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4))
cpqSasComponent = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5))
cpqScsiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1))
cpqScsiCntlr = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 2))
cpqScsiLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 3))
cpqScsiPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 4))
cpqScsiTarget = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 5))
cpqScsiCd = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 6))
cpqScsiOsNetWare = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1))
cpqScsiOsCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4))
cpqTapePhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 1))
cpqTapeCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 2))
cpqTapeLibrary = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 4, 3))
cpqSasHba = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5, 1))
cpqSasPhyDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5, 2))
cpqSasLogDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5, 3))
cpqSasTapeDrv = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 5, 5, 4))
cpqSbScsiBus = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7))
cpqSbScsiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7, 1))
cpqSbDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 7, 2))
cpqScsiMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
cpqScsiMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqScsiMibCondition = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqScsiNw3xDriverName = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqScsiNw3xDriverVers = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqScsiNw3xDriverPollType = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("polled", 2), ("demand", 3),))).setMaxAccess("readonly")
cpqScsiNw3xDriverPollTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,300))).setMaxAccess("readonly")
cpqScsiNw3xCntlrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5), )
cpqScsiNw3xCntlrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xBusIndex"))
cpqScsiNw3xCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiNw3xBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiNw3xXptDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqScsiNw3xXptVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqScsiNw3xSimDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqScsiNw3xSimVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqScsiNw3xHbaDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,16))).setMaxAccess("readonly")
cpqScsiLogDrvStatTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6), )
cpqScsiLogDrvStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xStatCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xStatBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xStatLogDrvIndex"))
cpqScsiNw3xStatCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiNw3xStatBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,225))).setMaxAccess("readonly")
cpqScsiNw3xStatLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,225))).setMaxAccess("readonly")
cpqScsiNw3xTotalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
cpqScsiNw3xTotalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
cpqScsiNw3xCorrReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
cpqScsiNw3xCorrWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
cpqScsiNw3xFatalReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
cpqScsiNw3xFatalWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
cpqScsiVolMapTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7), )
cpqScsiVolMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiNw3xVolCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xVolBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiNw3xVolLogDrvIndex"))
cpqScsiNw3xVolCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,225))).setMaxAccess("readonly")
cpqScsiNw3xVolBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,225))).setMaxAccess("readonly")
cpqScsiNw3xVolLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,225))).setMaxAccess("readonly")
cpqScsiNw3xVolMap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 1, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiOsCommonPollFreq = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readwrite")
cpqScsiOsCommonModuleTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2), )
cpqScsiOsCommonModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiOsCommonModuleIndex"))
cpqScsiOsCommonModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiOsCommonModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiOsCommonModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqScsiOsCommonModuleDate = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7,7)).setFixedLength(7)).setMaxAccess("readonly")
cpqScsiOsCommonModulePurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1), )
cpqScsiCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiCntlrBusIndex"))
cpqScsiCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqScsiCntlrBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiCntlrModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,)).clone(namedValues=NamedValues(("other", 1), ("cpqs710", 2), ("cpqs94", 3), ("cpqs810p", 4), ("cpqs825e", 5), ("cpqs825p", 6), ("cpqs974p", 7), ("cpqs875p", 8), ("extended", 9), ("cpqs895p", 10), ("cpqs896p", 11), ("cpqa789x", 12), ("cpqs876t", 13), ("hpu320", 14), ("hpu320r", 15), ("generic", 16), ("hp1u320g2", 17), ("hp1u320g1", 18), ("hpSc11Xe", 19),))).setMaxAccess("readonly")
cpqScsiCntlrFWVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
cpqScsiCntlrSWVers = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,5))).setMaxAccess("readonly")
cpqScsiCntlrSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiCntlrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3),))).setMaxAccess("readonly")
cpqScsiCntlrHardResets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
cpqScsiCntlrSoftResets = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
cpqScsiCntlrTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
cpqScsiCntlrBaseIOAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
cpqScsiCntlrCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqScsiCntlrSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,16))).setMaxAccess("readonly")
cpqScsiCntlrBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3),))).setMaxAccess("readonly")
cpqScsiCntlrModelExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,80))).setMaxAccess("readonly")
cpqScsiCntlrHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1), )
cpqScsiLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiLogDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiLogDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiLogDrvIndex"))
cpqScsiLogDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqScsiLogDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiLogDrvFaultTol = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("none", 2), ("mirroring", 3), ("dataGuard", 4), ("distribDataGuard", 5), ("enhancedMirroring", 6),))).setMaxAccess("readonly")
cpqScsiLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("unconfigured", 4), ("recovering", 5), ("readyForRebuild", 6), ("rebuilding", 7), ("wrongDrive", 8), ("badConnect", 9), ("degraded", 10), ("disabled", 11),))).setMaxAccess("readonly")
cpqScsiLogDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqScsiLogDrvPhyDrvIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqScsiLogDrvStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
cpqScsiLogDrvAvailSpares = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiLogDrvPercentRebuild = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
cpqScsiLogDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1), )
cpqScsiPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiPhyDrvIndex"))
cpqScsiPhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqScsiPhyDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,17))).setMaxAccess("readonly")
cpqScsiPhyDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqScsiPhyDrvVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,9))).setMaxAccess("readonly")
cpqScsiPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqScsiPhyDrvScsiID = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("notConfigured", 4), ("badCable", 5), ("missingWasOk", 6), ("missingWasFailed", 7), ("predictiveFailure", 8), ("missingWasPredictiveFailure", 9), ("offline", 10), ("missingWasOffline", 11), ("hardError", 12),))).setMaxAccess("readonly")
cpqScsiPhyDrvServiceHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvHighReadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvLowReadSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 12), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvHighWriteSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 13), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvLowWriteSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvHardReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvHardWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvEccCorrReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvRecvReadErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvRecvWriteErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvSeekErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvSpinupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 21), Integer32()).setMaxAccess("readonly")
cpqScsiPhyDrvUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 22), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 23), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvPostErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 24), Counter32()).setMaxAccess("readonly")
cpqScsiPhyDrvPostErrCode = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 25), Integer32()).setMaxAccess("readonly")
cpqScsiPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 26), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqScsiPhyDrvFuncTest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
cpqScsiPhyDrvFuncTest2 = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
cpqScsiPhyDrvStatsPreserved = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 29), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("other", 1), ("inNVRAM", 2), ("onDisk", 3), ("noCPUSupport", 4), ("noFreeNVRAM", 5), ("noDrvSupport", 6), ("noSoftwareSupport", 7), ("statsNotSupported", 8),))).setMaxAccess("readonly")
cpqScsiPhyDrvSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqScsiPhyDrvLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("other", 1), ("proliant", 2),))).setMaxAccess("readonly")
cpqScsiPhyDrvParent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiPhyDrvSectorSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqScsiPhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3),))).setMaxAccess("readonly")
cpqScsiPhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 35), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3),))).setMaxAccess("readonly")
cpqScsiPhyDrvPreFailMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 36), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("notAvailable", 2), ("available", 3),))).setMaxAccess("readonly")
cpqScsiPhyDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiPhyDrvRotationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 38), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("rpm7200", 2), ("rpm10K", 3), ("rpm15K", 4),))).setMaxAccess("readonly")
cpqScsiPhyDrvMemberLogDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 4, 1, 1, 39), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("member", 2), ("spare", 3), ("nonMember", 4),))).setMaxAccess("readonly")
cpqScsiTargetTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1), )
cpqScsiTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiTargetCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiTargetBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiTargetScsiIdIndex"))
cpqScsiTargetCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqScsiTargetBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiTargetScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("other", 1), ("disk", 2), ("tape", 3), ("printer", 4), ("processor", 5), ("wormDrive", 6), ("cd-rom", 7), ("scanner", 8), ("optical", 9), ("jukeBox", 10), ("commDev", 11),))).setMaxAccess("readonly")
cpqScsiTargetModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,17))).setMaxAccess("readonly")
cpqScsiTargetFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqScsiTargetVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,9))).setMaxAccess("readonly")
cpqScsiTargetParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
cpqScsiTargetPhaseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
cpqScsiTargetSelectTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
cpqScsiTargetMsgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
cpqScsiTargetNegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqScsiTargetLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("other", 1), ("proliant", 2),))).setMaxAccess("readonly")
cpqScsiTargetNegSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
cpqScsiTargetPhysWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("narrow", 2), ("wide16", 3),))).setMaxAccess("readonly")
cpqScsiTargetNegWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
cpqScsiTargetTypeExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("other", 1), ("pdcd", 2), ("removableDisk", 3), ("dltAutoloader", 4), ("cdJukebox", 5), ("cr3500", 6), ("autoloader", 7),))).setMaxAccess("readonly")
cpqScsiTargetCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("other", 1), ("asynchronous", 2), ("fast", 3), ("ultra", 4), ("ultra2", 5), ("ultra3", 6), ("scsi1", 7), ("ultra4", 8),))).setMaxAccess("readonly")
cpqScsiCdDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1), )
cpqScsiCdDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiCdDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqScsiCdDrvLunIndex"))
cpqScsiCdDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqScsiCdDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiCdDrvScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiCdDrvLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiCdDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,17))).setMaxAccess("readonly")
cpqScsiCdDrvVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,9))).setMaxAccess("readonly")
cpqScsiCdDrvFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqCdLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2), )
cpqCdLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqCdLibraryCntlrIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryBusIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqCdLibraryLunIndex"))
cpqCdLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
cpqCdLibraryBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqCdLibraryScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqCdLibraryLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqCdLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqCdLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3), ("offline", 4),))).setMaxAccess("readonly")
cpqCdLibraryModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,17))).setMaxAccess("readonly")
cpqCdLibraryVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,9))).setMaxAccess("readonly")
cpqCdLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqCdLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqCdLibraryFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqCdLibraryFwSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 2, 6, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqScsiTrapPkts = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 3, 1), Counter32()).setMaxAccess("readonly")
cpqScsiTrapLogMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 232, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqScsiTrapLogTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 3, 3), )
cpqScsiTrapLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqScsiTrapLogIndex"))
cpqScsiTrapLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqScsiTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 5001, 5002, 5003,)).clone(namedValues=NamedValues(("cpqScsiCntlrStatusChange", 1), ("cpqScsiLogDrvStatusChange", 2), ("cpqScsiPhyDrvStatusChange", 3), ("cpqScsi2CntlrStatusChange", 5001), ("cpqScsi2LogDrvStatusChange", 5002), ("cpqScsi2PhyDrvStatusChange", 5003),))).setMaxAccess("readonly")
cpqScsiTrapTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6,6)).setFixedLength(6)).setMaxAccess("readonly")
cpqSbMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 232, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,65535))).setMaxAccess("readonly")
cpqSbMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 232, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,65535))).setMaxAccess("readonly")
cpqSbDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 232, 7, 2, 2), )
cpqSbDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSbDevCntlrIndex"), (0, "CPQSCSI-MIB", "cpqSbDevBusIndex"), (0, "CPQSCSI-MIB", "cpqSbDevScsiIdIndex"))
cpqSbDevCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqSbDevBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqSbDevScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqSbDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,)).clone(namedValues=NamedValues(("other", 1), ("disk", 2), ("tape", 3), ("printer", 4), ("processor", 5), ("wormDrive", 6), ("cd-rom", 7), ("scanner", 8), ("optical", 9), ("jukeBox", 10), ("commDev", 11),))).setMaxAccess("readonly")
cpqSbDevModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,17))).setMaxAccess("readonly")
cpqSbDevFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqSbDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,9))).setMaxAccess("readonly")
cpqSbDevParityErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
cpqSbDevPhaseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
cpqSbDevSelectTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
cpqSbDevMsgRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
cpqSbDevNegPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqSbDevLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 7, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("other", 1), ("proliant", 2),))).setMaxAccess("readonly")
cpqTapePhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1), )
cpqTapePhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapePhyDrvLunIndex"))
cpqTapePhyDrvCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqTapePhyDrvBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapePhyDrvScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapePhyDrvLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapePhyDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,)).clone(namedValues=NamedValues(("other", 1), ("cpqDat4-16", 2), ("cpqDatAuto", 3), ("cpqDat2-8", 4), ("cpqDlt10-20", 5), ("cpqDlt20-40", 6), ("cpqDlt15-30", 7), ("cpqDlt35-70", 8), ("cpqDat4-8", 9), ("cpqSlr4-8", 10), ("cpqDat12-24", 11), ("cpqDatAuto12-24", 12), ("cpqMlr16-32", 13), ("cpqAit35", 14), ("cpqAit50", 15), ("cpqDat20-40", 16), ("cpqDlt40-80", 17), ("cpqDatAuto20-40", 18), ("cpqSuperDlt1", 19), ("cpqAit35Lvd", 20), ("cpqCompaq", 21),))).setMaxAccess("readonly")
cpqTapePhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqTapePhyDrvMagSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,255))).setMaxAccess("readonly")
cpqTapePhyDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqTapePhyDrvCleanReq = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3),))).setMaxAccess("readonly")
cpqTapePhyDrvCleanTapeRepl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3),))).setMaxAccess("readonly")
cpqTapePhyDrvFwSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapePhyDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
cpqTapePhyDrvCleanTapeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
cpqTapePhyDrvFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqTapePhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 4, 5, 6, 7, 8,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 4), ("offline", 5), ("missingWasOk", 6), ("missingWasFailed", 7), ("missingWasOffline", 8),))).setMaxAccess("readonly")
cpqTapePhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3),))).setMaxAccess("readonly")
cpqTapePhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3),))).setMaxAccess("readonly")
cpqTapePhyDrvLibraryDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("true", 2), ("false", 3),))).setMaxAccess("readonly")
cpqTapePhyDrvLoaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
cpqTapePhyDrvLoaderFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqTapePhyDrvLoaderSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqTapeCountersTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1), )
cpqTapeCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapeCountersCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersBusIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapeCountersLunIndex"))
cpqTapeCountersCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqTapeCountersBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapeCountersScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapeCountersLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapeCountersReWrites = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
cpqTapeCountersReReads = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
cpqTapeCountersTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
cpqTapeCountersTotalUncorrectable = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
cpqTapeCountersTotalBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
cpqTapeLibraryTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1), )
cpqTapeLibraryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqTapeLibraryCntlrIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryBusIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryScsiIdIndex"), (0, "CPQSCSI-MIB", "cpqTapeLibraryLunIndex"))
cpqTapeLibraryCntlrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqTapeLibraryBusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapeLibraryScsiIdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapeLibraryLunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,255))).setMaxAccess("readonly")
cpqTapeLibraryCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqTapeLibraryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,64535))).setMaxAccess("readonly")
cpqTapeLibraryDoorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("closed", 2), ("open", 3), ("notSupported", 4),))).setMaxAccess("readonly")
cpqTapeLibraryStatHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
cpqTapeLibraryStatMoves = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
cpqTapeLibraryName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,128))).setMaxAccess("readonly")
cpqTapeLibrarySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqTapeLibraryDriveList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,320))).setMaxAccess("readonly")
cpqTapeLibraryState = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4), ("offline", 5),))).setMaxAccess("readonly")
cpqTapeLibraryTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("ok", 3), ("safeTempExceeded", 4), ("maxTempExceeded", 5),))).setMaxAccess("readonly")
cpqTapeLibraryRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("capable", 3), ("notCapable", 4), ("active", 5),))).setMaxAccess("readonly")
cpqTapeLibraryHotSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("capable", 3), ("notCapable", 4),))).setMaxAccess("readonly")
cpqTapeLibraryFwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqTapeLibraryTapeList = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 4, 3, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,560))).setMaxAccess("readonly")
cpqSasHbaTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1), )
cpqSasHbaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSasHbaIndex"))
cpqSasHbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqSasHbaHwLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqSasHbaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,)).clone(namedValues=NamedValues(("other", 1), ("generic", 2), ("sas8int", 3), ("sas4int", 4), ("sasSc44Ge", 5), ("sasSc40Ge", 6), ("sasSc08Ge", 7), ("sasSc08e", 8), ("sasH220i", 9), ("sasH221", 10), ("sasH210i", 11), ("sasH220", 12), ("sasH222", 13),))).setMaxAccess("readonly")
cpqSasHbaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3),))).setMaxAccess("readonly")
cpqSasHbaCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqSasHbaOverallCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqSasHbaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,80))).setMaxAccess("readonly")
cpqSasHbaFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
cpqSasHbaBiosVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
cpqSasPhyDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1), )
cpqSasPhyDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSasPhyDrvHbaIndex"), (0, "CPQSCSI-MIB", "cpqSasPhyDrvIndex"))
cpqSasPhyDrvHbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqSasPhyDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
cpqSasPhyDrvLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqSasPhyDrvModel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqSasPhyDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("predictiveFailure", 3), ("offline", 4), ("failed", 5), ("missingWasOk", 6), ("missingWasPredictiveFailure", 7), ("missingWasOffline", 8), ("missingWasFailed", 9), ("ssdWearOut", 10), ("missingWasSSDWearOut", 11), ("notAuthenticated", 12), ("missingWasNotAuthenticated", 13),))).setMaxAccess("readonly")
cpqSasPhyDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqSasPhyDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqSasPhyDrvSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqSasPhyDrvUsedReallocs = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
cpqSasPhyDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqSasPhyDrvMemberLogDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("member", 2), ("spare", 3), ("nonMember", 4),))).setMaxAccess("readonly")
cpqSasPhyDrvRotationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("other", 1), ("rpm7200", 2), ("rpm10K", 3), ("rpm15K", 4), ("rpmSsd", 5),))).setMaxAccess("readonly")
cpqSasPhyDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqSasPhyDrvPlacement = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("external", 3),))).setMaxAccess("readonly")
cpqSasPhyDrvHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("hotPlug", 2), ("nonHotPlug", 3),))).setMaxAccess("readonly")
cpqSasPhyDrvType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("sas", 2), ("sata", 3),))).setMaxAccess("readonly")
cpqSasPhyDrvSasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,16))).setMaxAccess("readonly")
cpqSasPhyDrvMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("rotatingPlatters", 2), ("solidState", 3),))).setMaxAccess("readonly")
cpqSasPhyDrvSSDWearStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("fiftySixDayThreshold", 3), ("fivePercentThreshold", 4), ("twoPercentThreshold", 5), ("ssdWearOut", 6),))).setMaxAccess("readonly")
cpqSasPhyDrvPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
cpqSasPhyDrvSSDPercntEndrnceUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
cpqSasPhyDrvSSDEstTimeRemainingHours = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
cpqSasPhyDrvAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("notSupported", 2), ("authenticationFailed", 3), ("authenticationPassed", 4),))).setMaxAccess("readonly")
cpqSasPhyDrvSmartCarrierAppFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
cpqSasPhyDrvSmartCarrierBootldrFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
cpqSasPhyDrvCurrTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
cpqSasPhyDrvTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 2, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
cpqSasLogDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1), )
cpqSasLogDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSasLogDrvHbaIndex"), (0, "CPQSCSI-MIB", "cpqSasLogDrvIndex"))
cpqSasLogDrvHbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqSasLogDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
cpqSasLogDrvRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("other", 1), ("raid0", 2), ("raid1", 3), ("raid0plus1", 4), ("raid5", 5), ("raid15", 6), ("volume", 7),))).setMaxAccess("readonly")
cpqSasLogDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("rebuilding", 4), ("failed", 5), ("offline", 6),))).setMaxAccess("readonly")
cpqSasLogDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqSasLogDrvRebuildingDisk = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
cpqSasLogDrvCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
cpqSasLogDrvStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
cpqSasLogDrvPhyDrvIds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqSasLogDrvSpareIds = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
cpqSasLogDrvOsName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqSasLogDrvRebuildingPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 3, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
cpqSasTapeDrvTable = MibTable((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1), )
cpqSasTapeDrvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1), ).setIndexNames((0, "CPQSCSI-MIB", "cpqSasTapeDrvHbaIndex"), (0, "CPQSCSI-MIB", "cpqSasTapeDrvIndex"))
cpqSasTapeDrvHbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
cpqSasTapeDrvIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
cpqSasTapeDrvLocationString = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,255))).setMaxAccess("readonly")
cpqSasTapeDrvName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqSasTapeDrvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("offline", 3),))).setMaxAccess("readonly")
cpqSasTapeDrvCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4,)).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4),))).setMaxAccess("readonly")
cpqSasTapeDrvFWRev = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,8))).setMaxAccess("readonly")
cpqSasTapeDrvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,40))).setMaxAccess("readonly")
cpqSasTapeDrvSasAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 5, 5, 4, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0,16))).setMaxAccess("readonly")
cpqScsiCntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,1)).setObjects(*(("CPQSCSI-MIB", "cpqScsiCntlrStatus"),))
cpqScsiLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,2)).setObjects(*(("CPQSCSI-MIB", "cpqScsiLogDrvStatus"),))
cpqScsiPhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232, 5) + (0,3)).setObjects(*(("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"),))
cpqScsi2CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5001)).setObjects(*(("CPQSCSI-MIB", "cpqScsiCntlrStatus"),))
cpqScsi2LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5002)).setObjects(*(("CPQSCSI-MIB", "cpqScsiLogDrvStatus"),))
cpqScsi2PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5003)).setObjects(*(("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"),))
cpqTapePhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5004)).setObjects(*(("CPQSCSI-MIB", "cpqTapePhyDrvCondition"),))
cpqScsi3CntlrStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5005)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiCntlrStatus"),))
cpqScsi3PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5006)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"),))
cpqTape3PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5007)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"),))
cpqTape3PhyDrvCleaningRequired = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5008)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"),))
cpqTape3PhyDrvCleanTapeReplace = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5009)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCondition"),))
cpqTape3LibraryFailed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5010)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"),))
cpqTape3LibraryOkay = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5011)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"),))
cpqTape3LibraryDegraded = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5012)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"),))
cpqTape3LibraryDoorOpen = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5013)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"),))
cpqTape3LibraryDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5014)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"),))
cpqScsiCdLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5015)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqCdLibraryCntlrIndex"), ("CPQSCSI-MIB", "cpqCdLibraryBusIndex"), ("CPQSCSI-MIB", "cpqCdLibraryScsiIdIndex"), ("CPQSCSI-MIB", "cpqCdLibraryStatus"),))
cpqTape4PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5016)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvStatus"),))
cpqScsi4PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5017)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"), ("CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvVendor"), ("CPQSCSI-MIB", "cpqScsiPhyDrvModel"), ("CPQSCSI-MIB", "cpqScsiPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqScsiPhyDrvSerialNum"),))
cpqTapeLibraryStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5018)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapeLibraryCntlrIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryBusIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryLunIndex"), ("CPQSCSI-MIB", "cpqTapeLibraryName"), ("CPQSCSI-MIB", "cpqTapeLibraryFwRev"), ("CPQSCSI-MIB", "cpqTapeLibrarySerialNumber"), ("CPQSCSI-MIB", "cpqTapeLibraryState"),))
cpqTape5PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5019)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqTapePhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvScsiIdIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvLunIndex"), ("CPQSCSI-MIB", "cpqTapePhyDrvName"), ("CPQSCSI-MIB", "cpqTapePhyDrvFwRev"), ("CPQSCSI-MIB", "cpqTapePhyDrvSerialNumber"), ("CPQSCSI-MIB", "cpqTapePhyDrvStatus"),))
cpqScsi5PhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5020)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiPhyDrvStatus"), ("CPQSCSI-MIB", "cpqScsiPhyDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvIndex"), ("CPQSCSI-MIB", "cpqScsiPhyDrvVendor"), ("CPQSCSI-MIB", "cpqScsiPhyDrvModel"), ("CPQSCSI-MIB", "cpqScsiPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqScsiPhyDrvSerialNum"), ("CPQSCSI-MIB", "cpqScsiPhyDrvOsName"),))
cpqScsi3LogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5021)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqScsiLogDrvStatus"), ("CPQSCSI-MIB", "cpqScsiLogDrvCntlrIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvBusIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvIndex"), ("CPQSCSI-MIB", "cpqScsiLogDrvOsName"),))
cpqSasPhyDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5022)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqSasHbaHwLocation"), ("CPQSCSI-MIB", "cpqSasPhyDrvLocationString"), ("CPQSCSI-MIB", "cpqSasPhyDrvHbaIndex"), ("CPQSCSI-MIB", "cpqSasPhyDrvIndex"), ("CPQSCSI-MIB", "cpqSasPhyDrvStatus"), ("CPQSCSI-MIB", "cpqSasPhyDrvType"), ("CPQSCSI-MIB", "cpqSasPhyDrvModel"), ("CPQSCSI-MIB", "cpqSasPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqSasPhyDrvSerialNumber"), ("CPQSCSI-MIB", "cpqSasPhyDrvSasAddress"),))
cpqSasLogDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5023)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqSasHbaHwLocation"), ("CPQSCSI-MIB", "cpqSasLogDrvHbaIndex"), ("CPQSCSI-MIB", "cpqSasLogDrvIndex"), ("CPQSCSI-MIB", "cpqSasLogDrvStatus"), ("CPQSCSI-MIB", "cpqSasLogDrvOsName"),))
cpqSas2TapeDrvStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5025)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqSasHbaHwLocation"), ("CPQSCSI-MIB", "cpqSasTapeDrvLocationString"), ("CPQSCSI-MIB", "cpqSasTapeDrvHbaIndex"), ("CPQSCSI-MIB", "cpqSasTapeDrvIndex"), ("CPQSCSI-MIB", "cpqSasTapeDrvName"), ("CPQSCSI-MIB", "cpqSasTapeDrvFWRev"), ("CPQSCSI-MIB", "cpqSasTapeDrvSerialNumber"), ("CPQSCSI-MIB", "cpqSasTapeDrvSasAddress"), ("CPQSCSI-MIB", "cpqSasTapeDrvStatus"),))
cpqSasPhyDrvSSDWearStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 232) + (0,5026)).setObjects(*(("CPQSCSI-MIB", "sysName"), ("CPQSCSI-MIB", "cpqHoTrapFlags"), ("CPQSCSI-MIB", "cpqSasHbaHwLocation"), ("CPQSCSI-MIB", "cpqSasPhyDrvLocationString"), ("CPQSCSI-MIB", "cpqSasPhyDrvHbaIndex"), ("CPQSCSI-MIB", "cpqSasPhyDrvIndex"), ("CPQSCSI-MIB", "cpqSasPhyDrvType"), ("CPQSCSI-MIB", "cpqSasPhyDrvModel"), ("CPQSCSI-MIB", "cpqSasPhyDrvFWRev"), ("CPQSCSI-MIB", "cpqSasPhyDrvSerialNumber"), ("CPQSCSI-MIB", "cpqSasPhyDrvSasAddress"), ("CPQSCSI-MIB", "cpqSasPhyDrvSSDWearStatus"),))
mibBuilder.exportSymbols("CPQSCSI-MIB", cpqScsiPhyDrvHighWriteSectors=cpqScsiPhyDrvHighWriteSectors, cpqTapeCountersReReads=cpqTapeCountersReReads, cpqTapePhyDrvCntlrIndex=cpqTapePhyDrvCntlrIndex, cpqTapeCountersTotalUncorrectable=cpqTapeCountersTotalUncorrectable, cpqSasLogDrvCondition=cpqSasLogDrvCondition, cpqSbDevModel=cpqSbDevModel, cpqSasLogDrvCapacity=cpqSasLogDrvCapacity, cpqScsiNw3xStatBusIndex=cpqScsiNw3xStatBusIndex, cpqSasPhyDrvSasAddress=cpqSasPhyDrvSasAddress, cpqScsiTrapTime=cpqScsiTrapTime, cpqScsiLogDrvOsName=cpqScsiLogDrvOsName, cpqSasLogDrvEntry=cpqSasLogDrvEntry, cpqSasTapeDrvName=cpqSasTapeDrvName, cpqSasTapeDrvSerialNumber=cpqSasTapeDrvSerialNumber, cpqScsiPhyDrvSectorSize=cpqScsiPhyDrvSectorSize, cpqScsiCdDrvFwRev=cpqScsiCdDrvFwRev, cpqSasLogDrv=cpqSasLogDrv, cpqScsiNw3xVolMap=cpqScsiNw3xVolMap, cpqSasPhyDrvSSDWearStatusChange=cpqSasPhyDrvSSDWearStatusChange, cpqSasTapeDrvHbaIndex=cpqSasTapeDrvHbaIndex, cpqTapeLibraryStatus=cpqTapeLibraryStatus, cpqSbDevScsiIdIndex=cpqSbDevScsiIdIndex, cpqSbScsiMibRev=cpqSbScsiMibRev, cpqSasPhyDrvTemperatureThreshold=cpqSasPhyDrvTemperatureThreshold, cpqScsiTrapLogEntry=cpqScsiTrapLogEntry, cpqTape3LibraryFailed=cpqTape3LibraryFailed, cpqSasHbaOverallCondition=cpqSasHbaOverallCondition, cpqScsiPhyDrvScsiID=cpqScsiPhyDrvScsiID, cpqSbDevType=cpqSbDevType, cpqScsiVolMapTable=cpqScsiVolMapTable, cpqScsiNw3xCorrWrites=cpqScsiNw3xCorrWrites, cpqTapeLibrarySerialNumber=cpqTapeLibrarySerialNumber, cpqScsiTargetMsgRejects=cpqScsiTargetMsgRejects, cpqScsiMibRevMajor=cpqScsiMibRevMajor, cpqScsiOsCommonModulePurpose=cpqScsiOsCommonModulePurpose, cpqTapeLibraryStatMoves=cpqTapeLibraryStatMoves, cpqScsiVolMapEntry=cpqScsiVolMapEntry, cpqScsiCdDrvBusIndex=cpqScsiCdDrvBusIndex, cpqScsiNw3xCntlrInfoTable=cpqScsiNw3xCntlrInfoTable, cpqTapePhyDrvLibraryDrive=cpqTapePhyDrvLibraryDrive, cpqScsi=cpqScsi, cpqScsiMibRev=cpqScsiMibRev, cpqSasPhyDrvSSDEstTimeRemainingHours=cpqSasPhyDrvSSDEstTimeRemainingHours, cpqSbDevNegPeriod=cpqSbDevNegPeriod, cpqSasPhyDrvHotPlug=cpqSasPhyDrvHotPlug, cpqSbDevPhaseErrs=cpqSbDevPhaseErrs, cpqSasHbaHwLocation=cpqSasHbaHwLocation, cpqScsiCntlrBusWidth=cpqScsiCntlrBusWidth, cpqSasHba=cpqSasHba, cpqScsiPhyDrvServiceHours=cpqScsiPhyDrvServiceHours, cpqTapePhyDrvLoaderFwRev=cpqTapePhyDrvLoaderFwRev, cpqSasLogDrvStatusChange=cpqSasLogDrvStatusChange, cpqScsiCntlrFWVers=cpqScsiCntlrFWVers, cpqSasPhyDrvFWRev=cpqSasPhyDrvFWRev, cpqSbDevVendor=cpqSbDevVendor, cpqScsiPhyDrvMemberLogDrv=cpqScsiPhyDrvMemberLogDrv, cpqTapePhyDrvCleanReq=cpqTapePhyDrvCleanReq, cpqScsiLogDrvBusIndex=cpqScsiLogDrvBusIndex, cpqTape3PhyDrvStatusChange=cpqTape3PhyDrvStatusChange, cpqScsiCdDrvEntry=cpqScsiCdDrvEntry, cpqScsi4PhyDrvStatusChange=cpqScsi4PhyDrvStatusChange, cpqScsiPhyDrvLowWriteSectors=cpqScsiPhyDrvLowWriteSectors, cpqSasPhyDrvMemberLogDrv=cpqSasPhyDrvMemberLogDrv, cpqScsiPhyDrvOsName=cpqScsiPhyDrvOsName, cpqScsiPhyDrvCondition=cpqScsiPhyDrvCondition, cpqTapeLibraryDoorStatus=cpqTapeLibraryDoorStatus, cpqTapeLibraryRedundancy=cpqTapeLibraryRedundancy, cpqSasHbaEntry=cpqSasHbaEntry, cpqScsiNw3xXptDesc=cpqScsiNw3xXptDesc, cpqScsiMibCondition=cpqScsiMibCondition, cpqScsiOsNetWare=cpqScsiOsNetWare, cpqTape4PhyDrvStatusChange=cpqTape4PhyDrvStatusChange, cpqTapePhyDrvName=cpqTapePhyDrvName, cpqScsiLogDrvFaultTol=cpqScsiLogDrvFaultTol, cpqScsiTargetNegWidth=cpqScsiTargetNegWidth, cpqTapePhyDrvBusIndex=cpqTapePhyDrvBusIndex, cpqScsiCntlrTimeouts=cpqScsiCntlrTimeouts, cpqSasPhyDrvSmartCarrierAppFWRev=cpqSasPhyDrvSmartCarrierAppFWRev, cpqScsiCntlrCondition=cpqScsiCntlrCondition, cpqSasPhyDrvSerialNumber=cpqSasPhyDrvSerialNumber, cpqTapeLibraryCondition=cpqTapeLibraryCondition, cpqScsiCntlrStatus=cpqScsiCntlrStatus, cpqScsiTargetLocation=cpqScsiTargetLocation, cpqScsiLogDrvPhyDrvIDs=cpqScsiLogDrvPhyDrvIDs, cpqScsiCntlrTable=cpqScsiCntlrTable, cpqTapePhyDrvSerialNumber=cpqTapePhyDrvSerialNumber, cpqScsiPhyDrvHotPlug=cpqScsiPhyDrvHotPlug, cpqScsiCntlrIndex=cpqScsiCntlrIndex, cpqSasPhyDrvPowerOnHours=cpqSasPhyDrvPowerOnHours, cpqTapeLibraryScsiIdIndex=cpqTapeLibraryScsiIdIndex, cpqTapeCountersTotalErrors=cpqTapeCountersTotalErrors, cpqCdLibraryStatus=cpqCdLibraryStatus, cpqScsiPhyDrvPostErrCode=cpqScsiPhyDrvPostErrCode, cpqScsiTrap=cpqScsiTrap, cpqSasLogDrvIndex=cpqSasLogDrvIndex, cpqSasTapeDrvTable=cpqSasTapeDrvTable, cpqCdLibraryFwRev=cpqCdLibraryFwRev, cpqScsiPhyDrvHardReadErrs=cpqScsiPhyDrvHardReadErrs, cpqTapeLibraryLunIndex=cpqTapeLibraryLunIndex, cpqTapeLibraryTemperature=cpqTapeLibraryTemperature, cpqScsiNw3xCntlrInfoEntry=cpqScsiNw3xCntlrInfoEntry, cpqSasHbaBiosVersion=cpqSasHbaBiosVersion, cpqScsiPhyDrvFWRev=cpqScsiPhyDrvFWRev, cpqScsiPhyDrvVendor=cpqScsiPhyDrvVendor, cpqSasComponent=cpqSasComponent, cpqSasPhyDrvAuthenticationStatus=cpqSasPhyDrvAuthenticationStatus, cpqTapeLibraryHotSwap=cpqTapeLibraryHotSwap, cpqCdLibraryCntlrIndex=cpqCdLibraryCntlrIndex, cpqTapeLibraryCntlrIndex=cpqTapeLibraryCntlrIndex, cpqScsiPhyDrv=cpqScsiPhyDrv, cpqScsiLogDrvAvailSpares=cpqScsiLogDrvAvailSpares, cpqScsiCdDrvVendor=cpqScsiCdDrvVendor, cpqTapePhyDrvCleanTapeCount=cpqTapePhyDrvCleanTapeCount, cpqSasLogDrvStatus=cpqSasLogDrvStatus, cpqSasPhyDrvSSDWearStatus=cpqSasPhyDrvSSDWearStatus, cpqTapePhyDrvCleanTapeRepl=cpqTapePhyDrvCleanTapeRepl, cpqScsiNw3xDriverVers=cpqScsiNw3xDriverVers, cpqSasPhyDrvCurrTemperature=cpqSasPhyDrvCurrTemperature, cpqScsiTargetEntry=cpqScsiTargetEntry, cpqCdLibraryCondition=cpqCdLibraryCondition, cpqSbMibRevMinor=cpqSbMibRevMinor, cpqScsiPhyDrvSpinupTime=cpqScsiPhyDrvSpinupTime, cpqScsiCntlrEntry=cpqScsiCntlrEntry, cpqScsiNw3xXptVers=cpqScsiNw3xXptVers, cpqSasPhyDrvPlacement=cpqSasPhyDrvPlacement, cpqTapeCountersCntlrIndex=cpqTapeCountersCntlrIndex, cpqScsiCdDrvLunIndex=cpqScsiCdDrvLunIndex, cpqScsiNw3xCntlrIndex=cpqScsiNw3xCntlrIndex, cpqScsiOsCommonModuleDate=cpqScsiOsCommonModuleDate, cpqTapeCountersBusIndex=cpqTapeCountersBusIndex, cpqTapePhyDrvCondition=cpqTapePhyDrvCondition, cpqSasTapeDrvCondition=cpqSasTapeDrvCondition, cpqScsiPhyDrvRotationalSpeed=cpqScsiPhyDrvRotationalSpeed, cpqScsiPhyDrvLowReadSectors=cpqScsiPhyDrvLowReadSectors, cpqSasLogDrvRaidLevel=cpqSasLogDrvRaidLevel, cpqScsiLogDrvCntlrIndex=cpqScsiLogDrvCntlrIndex, cpqTapePhyDrvHotPlug=cpqTapePhyDrvHotPlug, cpqTape3PhyDrvCleanTapeReplace=cpqTape3PhyDrvCleanTapeReplace, cpqTapeCounters=cpqTapeCounters, cpqSasPhyDrvStatus=cpqSasPhyDrvStatus, cpqTapeLibraryFwRev=cpqTapeLibraryFwRev, cpqScsi2LogDrvStatusChange=cpqScsi2LogDrvStatusChange, cpqScsiNw3xSimDesc=cpqScsiNw3xSimDesc, cpqSbMibRevMajor=cpqSbMibRevMajor, cpqCdLibraryEntry=cpqCdLibraryEntry, cpqScsiTargetCurrentSpeed=cpqScsiTargetCurrentSpeed, cpqTapeLibraryTapeList=cpqTapeLibraryTapeList, cpqScsiLogDrvStripeSize=cpqScsiLogDrvStripeSize, cpqScsiTargetCntlrIndex=cpqScsiTargetCntlrIndex, cpqSasTapeDrv=cpqSasTapeDrv, cpqCdLibraryFwSubtype=cpqCdLibraryFwSubtype, cpqScsiTargetPhysWidth=cpqScsiTargetPhysWidth, cpqScsiPhyDrvRecvWriteErrs=cpqScsiPhyDrvRecvWriteErrs, cpqTapePhyDrvFwRev=cpqTapePhyDrvFwRev, cpqScsiTargetModel=cpqScsiTargetModel, cpqScsiTrapLogTable=cpqScsiTrapLogTable, cpqScsiCdDrvScsiIdIndex=cpqScsiCdDrvScsiIdIndex, cpqSasTapeDrvSasAddress=cpqSasTapeDrvSasAddress, cpqScsiTrapLogIndex=cpqScsiTrapLogIndex, cpqSasPhyDrvSmartCarrierBootldrFWRev=cpqSasPhyDrvSmartCarrierBootldrFWRev, cpqSasLogDrvSpareIds=cpqSasLogDrvSpareIds, cpqScsiPhyDrvHighReadSectors=cpqScsiPhyDrvHighReadSectors, cpqScsiNw3xDriverPollType=cpqScsiNw3xDriverPollType, cpqTape3PhyDrvCleaningRequired=cpqTape3PhyDrvCleaningRequired, cpqScsiCdLibraryStatusChange=cpqScsiCdLibraryStatusChange, cpqScsiPhyDrvEccCorrReads=cpqScsiPhyDrvEccCorrReads, cpqScsiCntlrSWVers=cpqScsiCntlrSWVers, cpqTapePhyDrvLunIndex=cpqTapePhyDrvLunIndex, cpqTapeCountersScsiIdIndex=cpqTapeCountersScsiIdIndex, cpqScsiPhyDrvRecvReadErrs=cpqScsiPhyDrvRecvReadErrs, cpqScsiLogDrvCondition=cpqScsiLogDrvCondition, cpqSasHbaTable=cpqSasHbaTable, cpqSasHbaStatus=cpqSasHbaStatus, cpqCdLibraryTable=cpqCdLibraryTable, cpqSasPhyDrvType=cpqSasPhyDrvType, cpqSasPhyDrvSize=cpqSasPhyDrvSize, cpqSasLogDrvTable=cpqSasLogDrvTable, cpqScsi5PhyDrvStatusChange=cpqScsi5PhyDrvStatusChange, cpqTapeLibraryStatusChange=cpqTapeLibraryStatusChange, cpqTapeCountersReWrites=cpqTapeCountersReWrites, cpqScsiCntlrHwLocation=cpqScsiCntlrHwLocation, cpqScsiTrapLogMaxSize=cpqScsiTrapLogMaxSize, cpqScsiCdDrvModel=cpqScsiCdDrvModel, cpqScsiTargetFWRev=cpqScsiTargetFWRev, cpqScsiOsCommon=cpqScsiOsCommon, cpqScsiMibRevMinor=cpqScsiMibRevMinor, cpqScsiTargetParityErrs=cpqScsiTargetParityErrs, cpqScsiLogDrvStatEntry=cpqScsiLogDrvStatEntry, cpqScsiTrapType=cpqScsiTrapType, cpqSbDevBusIndex=cpqSbDevBusIndex, cpqSas2TapeDrvStatusChange=cpqSas2TapeDrvStatusChange, cpqSasHbaCondition=cpqSasHbaCondition, cpqTape3LibraryDoorOpen=cpqTape3LibraryDoorOpen, cpqScsiNw3xVolBusIndex=cpqScsiNw3xVolBusIndex, cpqScsiPhyDrvPreFailMonitoring=cpqScsiPhyDrvPreFailMonitoring, cpqScsiNw3xHbaDesc=cpqScsiNw3xHbaDesc, cpqScsiNw3xVolLogDrvIndex=cpqScsiNw3xVolLogDrvIndex, cpqCdLibraryDriveList=cpqCdLibraryDriveList, cpqScsiLogDrvStatus=cpqScsiLogDrvStatus, cpqScsiTargetNegSpeed=cpqScsiTargetNegSpeed, cpqScsiLogDrvEntry=cpqScsiLogDrvEntry, cpqScsiPhyDrvBusIndex=cpqScsiPhyDrvBusIndex, cpqScsiCntlr=cpqScsiCntlr, cpqTapeLibraryBusIndex=cpqTapeLibraryBusIndex, cpqSbDevCntlrIndex=cpqSbDevCntlrIndex, cpqScsiLogDrvPercentRebuild=cpqScsiLogDrvPercentRebuild, cpqTapePhyDrvLoaderSerialNum=cpqTapePhyDrvLoaderSerialNum, cpqSasHbaSerialNumber=cpqSasHbaSerialNumber, cpqScsiPhyDrvSerialNum=cpqScsiPhyDrvSerialNum, cpqScsiCdDrvTable=cpqScsiCdDrvTable, cpqScsi3PhyDrvStatusChange=cpqScsi3PhyDrvStatusChange, cpqScsiLogDrvSize=cpqScsiLogDrvSize, cpqScsiCd=cpqScsiCd, cpqSasLogDrvOsName=cpqSasLogDrvOsName, cpqTapeLibrary=cpqTapeLibrary, cpqScsiTarget=cpqScsiTarget, cpqSasPhyDrvModel=cpqSasPhyDrvModel, cpqTapePhyDrvPlacement=cpqTapePhyDrvPlacement, cpqSasPhyDrvIndex=cpqSasPhyDrvIndex, cpqScsiComponent=cpqScsiComponent, cpqSasPhyDrvUsedReallocs=cpqSasPhyDrvUsedReallocs, cpqScsiCntlrBaseIOAddr=cpqScsiCntlrBaseIOAddr, cpqScsiTargetType=cpqScsiTargetType, cpqSasLogDrvRebuildingDisk=cpqSasLogDrvRebuildingDisk, cpqScsiCdDrvCntlrIndex=cpqScsiCdDrvCntlrIndex, cpqSasTapeDrvEntry=cpqSasTapeDrvEntry, cpqScsiCntlrHardResets=cpqScsiCntlrHardResets, cpqScsiLogDrvTable=cpqScsiLogDrvTable, cpqSasPhyDrvStatusChange=cpqSasPhyDrvStatusChange, cpqSbDevParityErrs=cpqSbDevParityErrs, cpqScsiNw3xTotalReads=cpqScsiNw3xTotalReads, cpqScsiCntlrStatusChange=cpqScsiCntlrStatusChange, cpqScsiCntlrSerialNum=cpqScsiCntlrSerialNum, cpqScsiOsCommonModuleEntry=cpqScsiOsCommonModuleEntry, cpqSbDeviceTable=cpqSbDeviceTable, cpqTapeCountersTotalBytes=cpqTapeCountersTotalBytes, cpqTapePhyDrvStatusChange=cpqTapePhyDrvStatusChange, cpqSasPhyDrvCondition=cpqSasPhyDrvCondition, cpqTapeLibraryName=cpqTapeLibraryName, cpqTape3LibraryDoorClosed=cpqTape3LibraryDoorClosed, cpqSasPhyDrvRotationalSpeed=cpqSasPhyDrvRotationalSpeed, cpqScsiTargetScsiIdIndex=cpqScsiTargetScsiIdIndex, cpqTapePhyDrvStatus=cpqTapePhyDrvStatus, cpqSasLogDrvRebuildingPercent=cpqSasLogDrvRebuildingPercent, cpqSasTapeDrvIndex=cpqSasTapeDrvIndex, cpqScsiPhyDrvModel=cpqScsiPhyDrvModel, cpqSbDevLocation=cpqSbDevLocation, cpqScsiNw3xVolCntlrIndex=cpqScsiNw3xVolCntlrIndex, cpqCdLibrarySerialNumber=cpqCdLibrarySerialNumber, cpqTapePhyDrvFwSubtype=cpqTapePhyDrvFwSubtype, cpqScsiPhyDrvEntry=cpqScsiPhyDrvEntry, cpqScsiPhyDrvPostErrs=cpqScsiPhyDrvPostErrs, cpqScsiCntlrSoftResets=cpqScsiCntlrSoftResets, cpqTapeLibraryStatHours=cpqTapeLibraryStatHours)
mibBuilder.exportSymbols("CPQSCSI-MIB", cpqScsi3LogDrvStatusChange=cpqScsi3LogDrvStatusChange, cpqScsiCntlrSlot=cpqScsiCntlrSlot, cpqScsi3CntlrStatusChange=cpqScsi3CntlrStatusChange, cpqSasPhyDrvEntry=cpqSasPhyDrvEntry, cpqTapePhyDrvScsiIdIndex=cpqTapePhyDrvScsiIdIndex, cpqSbDevSelectTimeouts=cpqSbDevSelectTimeouts, cpqSasPhyDrvLocationString=cpqSasPhyDrvLocationString, cpqScsiOsCommonModuleName=cpqScsiOsCommonModuleName, cpqSasHbaIndex=cpqSasHbaIndex, cpqTapeCountersLunIndex=cpqTapeCountersLunIndex, cpqScsiTrapPkts=cpqScsiTrapPkts, cpqSbDevice=cpqSbDevice, cpqScsiPhyDrvSeekErrs=cpqScsiPhyDrvSeekErrs, cpqSbDeviceEntry=cpqSbDeviceEntry, cpqScsiLogDrvStatusChange=cpqScsiLogDrvStatusChange, cpqSasHbaFwVersion=cpqSasHbaFwVersion, cpqScsiTargetSelectTimeouts=cpqScsiTargetSelectTimeouts, cpqSasTapeDrvFWRev=cpqSasTapeDrvFWRev, cpqSasLogDrvPhyDrvIds=cpqSasLogDrvPhyDrvIds, cpqScsiNw3xCorrReads=cpqScsiNw3xCorrReads, cpqScsiPhyDrvStatsPreserved=cpqScsiPhyDrvStatsPreserved, cpqTape3LibraryOkay=cpqTape3LibraryOkay, cpqScsiTargetTable=cpqScsiTargetTable, cpqSasPhyDrvMediaType=cpqSasPhyDrvMediaType, cpqScsiOsCommonModuleVersion=cpqScsiOsCommonModuleVersion, cpqSasPhyDrvSSDPercntEndrnceUsed=cpqSasPhyDrvSSDPercntEndrnceUsed, cpqScsiNw3xFatalReads=cpqScsiNw3xFatalReads, cpqScsiTargetPhaseErrs=cpqScsiTargetPhaseErrs, cpqTapePhyDrvEntry=cpqTapePhyDrvEntry, cpqScsiPhyDrvStatusChange=cpqScsiPhyDrvStatusChange, cpqTape3LibraryDegraded=cpqTape3LibraryDegraded, cpqScsiNw3xBusIndex=cpqScsiNw3xBusIndex, cpqScsiPhyDrvFuncTest2=cpqScsiPhyDrvFuncTest2, cpqSasLogDrvHbaIndex=cpqSasLogDrvHbaIndex, cpqCdLibraryLunIndex=cpqCdLibraryLunIndex, cpqCdLibraryModel=cpqCdLibraryModel, cpqTapeCountersEntry=cpqTapeCountersEntry, cpqScsiInterface=cpqScsiInterface, cpqScsiPhyDrvSize=cpqScsiPhyDrvSize, cpqScsiTargetVendor=cpqScsiTargetVendor, cpqSasLogDrvStripeSize=cpqSasLogDrvStripeSize, cpqScsiCntlrModel=cpqScsiCntlrModel, cpqScsi2PhyDrvStatusChange=cpqScsi2PhyDrvStatusChange, cpqScsiPhyDrvStatus=cpqScsiPhyDrvStatus, cpqScsiNw3xDriverPollTime=cpqScsiNw3xDriverPollTime, cpqScsiNw3xStatLogDrvIndex=cpqScsiNw3xStatLogDrvIndex, cpqScsiNw3xTotalWrites=cpqScsiNw3xTotalWrites, cpqScsi2CntlrStatusChange=cpqScsi2CntlrStatusChange, cpqSasTapeDrvLocationString=cpqSasTapeDrvLocationString, cpqTapePhyDrvType=cpqTapePhyDrvType, cpqScsiNw3xSimVers=cpqScsiNw3xSimVers, cpqScsiPhyDrvLocation=cpqScsiPhyDrvLocation, cpqScsiLogDrv=cpqScsiLogDrv, cpqScsiLogDrvIndex=cpqScsiLogDrvIndex, cpqScsiPhyDrvCntlrIndex=cpqScsiPhyDrvCntlrIndex, cpqScsiTargetNegPeriod=cpqScsiTargetNegPeriod, cpqTapePhyDrvMagSize=cpqTapePhyDrvMagSize, cpqCdLibraryVendor=cpqCdLibraryVendor, cpqTapePhyDrvTable=cpqTapePhyDrvTable, cpqTapeLibraryEntry=cpqTapeLibraryEntry, cpqCdLibraryScsiIdIndex=cpqCdLibraryScsiIdIndex, cpqScsiCntlrBusIndex=cpqScsiCntlrBusIndex, cpqScsiPhyDrvParent=cpqScsiPhyDrvParent, cpqScsiPhyDrvUsedReallocs=cpqScsiPhyDrvUsedReallocs, cpqScsiOsCommonModuleTable=cpqScsiOsCommonModuleTable, cpqScsiLogDrvStatTable=cpqScsiLogDrvStatTable, cpqScsiCntlrModelExtended=cpqScsiCntlrModelExtended, cpqSasPhyDrvHbaIndex=cpqSasPhyDrvHbaIndex, cpqSasPhyDrv=cpqSasPhyDrv, cpqScsiOsCommonModuleIndex=cpqScsiOsCommonModuleIndex, cpqSasTapeDrvStatus=cpqSasTapeDrvStatus, cpqTape5PhyDrvStatusChange=cpqTape5PhyDrvStatusChange, cpqSbDevMsgRejects=cpqSbDevMsgRejects, cpqScsiNw3xDriverName=cpqScsiNw3xDriverName, cpqScsiPhyDrvTimeouts=cpqScsiPhyDrvTimeouts, cpqTapePhyDrvLoaderName=cpqTapePhyDrvLoaderName, cpqSasPhyDrvTable=cpqSasPhyDrvTable, cpqSbScsiBus=cpqSbScsiBus, cpqScsiNw3xStatCntlrIndex=cpqScsiNw3xStatCntlrIndex, cpqSasPhyDrvOsName=cpqSasPhyDrvOsName, cpqScsiPhyDrvIndex=cpqScsiPhyDrvIndex, cpqScsiOsCommonPollFreq=cpqScsiOsCommonPollFreq, cpqScsiPhyDrvTable=cpqScsiPhyDrvTable, cpqSbDevFWRev=cpqSbDevFWRev, cpqTapePhyDrv=cpqTapePhyDrv, cpqScsiNw3xFatalWrites=cpqScsiNw3xFatalWrites, cpqTapeLibraryTable=cpqTapeLibraryTable, cpqScsiTargetTypeExtended=cpqScsiTargetTypeExtended, cpqTapeComponent=cpqTapeComponent, cpqTapeLibraryDriveList=cpqTapeLibraryDriveList, cpqScsiTargetBusIndex=cpqScsiTargetBusIndex, cpqCdLibraryBusIndex=cpqCdLibraryBusIndex, cpqScsiPhyDrvPlacement=cpqScsiPhyDrvPlacement, cpqScsiPhyDrvHardWriteErrs=cpqScsiPhyDrvHardWriteErrs, cpqTapeCountersTable=cpqTapeCountersTable, cpqScsiPhyDrvFuncTest1=cpqScsiPhyDrvFuncTest1, cpqTapeLibraryState=cpqTapeLibraryState, cpqSasHbaModel=cpqSasHbaModel)
